/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/custom_plugins.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    java

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    implementation(project(":model-api-gen"))
    implementation(project(":model-api"))
}

// ------------- Download MPS for the functional test ------------------------------------------------------------------

val mps = configurations.create("mps")

dependencies {
    mps("com.jetbrains:mps:2022.3.+")
}

val mpsDir = buildDir.resolve("mps")

val resolveMps by tasks.registering(Sync::class) {
    from(mps.resolve().map { zipTree(it) })
    into(mpsDir)
}

val writeVersionFile by tasks.registering {
    val propertiesFile = projectDir.resolve("src/main/resources/modelix.core.version.properties")
    propertiesFile.parentFile.mkdirs()
    propertiesFile.writeText("""
        modelix.core.version=$version
    """.trimIndent())
}
tasks.named("processResources") {
    dependsOn(writeVersionFile)
}

// ---------------------------------------------------------------------------------------------------------------------

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest()
        }

        // Create a new test suite
        val functionalTest by registering(JvmTestSuite::class) {
            useJUnit()

            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation(project(":model-api-gen-gradle"))
                implementation(project(":model-api"))
                implementation(project(":model-api-gen"))
                implementation(project(":metamodel-export"))
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure { shouldRunAfter(test) } 
                }
            }
        }
    }
}

gradlePlugin {
    // Define the plugin
    val mpsMetaModel by plugins.creating {
        id = "org.modelix.model-api-gen"
        implementationClass = "org.modelix.metamodel.gradle.MetaModelGradlePlugin"
    }
}

gradlePlugin.testSourceSets(sourceSets["functionalTest"])

tasks.named<Task>("check") {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.named("functionalTest"))
}

tasks.named("functionalTest") {
    dependsOn(resolveMps)
    dependsOn(":metamodel-export:publish_metamodel-export_PublicationToMavenLocal")
}
