import com.github.gradle.node.npm.task.NpxTask

plugins {
    base
    alias(libs.plugins.node)
}

description = "OpenAPI specification for the model-server"

val specDir = layout.projectDirectory.dir("specifications")

val bundleDir = layout.buildDirectory.dir("bundled").get()

val joinedFile = layout.buildDirectory.file("model-server.yaml").get()

// We bundle the specs to apply the decorator that prepends the server path to each route.
val bundleSpecs = tasks.register<NpxTask>("bundleSpecs") {
    description = "preprocesses OpenAPI specifications before joining them"

    dependsOn(tasks.getByName("npmInstall"))

    inputs.files("package-lock.json", "redocly.yaml")
    inputs.dir(specDir)

    outputs.cacheIf { true }
    outputs.dir(bundleDir)

    command.set("redocly")
    args.addAll("bundle")
}

// We combine all specifications into one to deduplicate things like the Problem type
val joinSpecs = tasks.register<NpxTask>("joinSpecs") {
    description = "combines all OpenAPI specifications into a single one"

    dependsOn(tasks.getByName("npmInstall"))
    dependsOn(bundleSpecs)

    inputs.files("package-lock.json", "redocly.yaml")
    inputs.dir(bundleDir)

    outputs.cacheIf { true }
    outputs.file(joinedFile)

    command.set("redocly")
    args.addAll("join", "--output", joinedFile.toString())
    // We sort the v2 file first because it determines the meta-data of the generated joined file.
    // This list of files needs to be kept in sync with the contents of redocly.yaml. We cannot dynamically detect the
    // files generated by redocly here as NPM argas can only be passed in the configuration phase of Gradle. At that
    // point in time, no files have been generated yet on fresh builds.
    args.addAll(
        listOf(
            "model-server-v2.yaml",
            "model-server-v1.yaml",
            "model-server-operative.yaml",
            "lionweb.yaml",
        ).map { bundleDir.file(it).toString() },
    )
}

// This provides the resulting joined OpenAPI specification to the model-server project to be declared as a dependency.
// Cf. https://docs.gradle.org/current/userguide/cross_project_publications.html#cross_project_publications
val openApiSpec by configurations.creating {
    isCanBeConsumed = true
    isCanBeResolved = false
}
artifacts {
    add(openApiSpec.name, joinedFile) {
        builtBy(joinSpecs)
    }
}
