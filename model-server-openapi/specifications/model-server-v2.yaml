# WARNING - EXPERIMENTAL
# This file was auto generated from the existing API using an IntelliJ plugin,
# see https://www.jetbrains.com/help/idea/openapi.html#generate_openapi
#
# Manual changes were done for this 'spec' to work in-place with the
# model-server for now. A lot of changes were done and are still necessary
# to make this OpenAPI a viable artifact. It will most likely be split
# into multiple OpenAPI files.

openapi: "3.0.3"
info:
  title: "model-server public API"
  description: "modelix public API"
  version: "1.0.0"
servers:
  - url: '/v2'
    description: model-server
tags:
  - name: ids
  - name: v2
paths:
  /server-id:
    get:
      summary: Returns the ID of the server
      tags:
        - ids
      operationId: getServerId
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /user-id:
    get:
      tags:
        - ids
      operationId: getUserId
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /generate-client-id:
    post:
      tags:
        - ids
      operationId: generateClientId
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories:
    get:
      tags:
        - v2
      operationId: getRepositories
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/objects:
    put:
      tags:
        - v2
      operationId: putRepositoryObjects
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200json'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/objects/getAll:
    post:
      tags:
        - v2
      operationId: postRepositoryObjectsGetAll
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/config:
    get:
      tags:
        - v2
      operationId: getRepositoryConfig
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/branches:
    get:
      tags:
        - v2
      operationId: getRepositoryBranches
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/branches/{branch}:
    delete:
      tags:
        - v2
      operationId: deleteRepositoryBranch
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "204":
          description: "Branch successfully deleted"
        default:
          $ref: '#/components/responses/GeneralError'
    get:
      tags:
        - v2
      operationId: getRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: filter
          in: "query"
          required: false
          schema:
            type: string
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      x-modelix-media-type-handlers:
        - v1:
            - 'application/x.modelix.branch+json;version=1'
        - delta:
            - 'application/x-modelix-objects-v2'
            - 'application/x-modelix-objects'
            - 'application/json'
            - 'text/plain'
            - '*/*'
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          description: "Information about a branch for content type `application/x.modelix.branch+json;version=*'. Else all model data of the branch in version delta format."
          content:
            'application/x.modelix.branch+json;version=1':
              schema:
                $ref: "#/components/schemas/BranchV1"
            'application/x-modelix-objects-v2':
              schema:
                type: string
            'application/x-modelix-objects':
              schema:
                type: string
            'application/json':
              schema:
                type: object
            'text/plain':
              schema:
                type: string
        default:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - v2
      operationId: postRepositoryBranch
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      # this was autogenerated but will break tests
      # we need to manually design the content to allow
      # type safe access on our APIs
      #      requestBody:
      #        content:
      #          '*/*':
      #            schema:
      #              type: string
      ##              $ref: "#/components/schemas/VersionDelta"
      #        required: true
      responses:
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/branches/{branch}/hash:
    get:
      tags:
        - v2
      operationId: getRepositoryBranchHash
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/branches/{branch}/poll:
    get:
      tags:
        - v2
      operationId: pollRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/branches/{branch}/pollHash:
    get:
      tags:
        - v2
      operationId: pollRepositoryBranchHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: legacyGlobalStorage
          in: "query"
          required: false
          schema:
            type: boolean
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/200'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/branches/{branch}/query:
    post:
      tags:
        - v2
      operationId: postRepositoryBranchQuery
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        "422":
          $ref: '#/components/responses/ModelQlQueryExecutionFailed'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/init:
    post:
      tags:
        - v2
      operationId: initializeRepository
      parameters:
        - name: useRoleIds
          in: "query"
          required: false
          schema:
            type: boolean
            default: true
        - name: legacyGlobalStorage
          in: "query"
          required: false
          schema:
            type: boolean
            default: false
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/delete:
    post:
      tags:
        - v2
      operationId: deleteRepository
      parameters:
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "204":
          description: "Repository successfully deleted"
          content:
            text/plain:
              schema:
                type: string
        "404":
          $ref: '#/components/responses/404'
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/versions/{versionHash}:
    get:
      tags:
        - v2
      operationId: getRepositoryVersionHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
        default:
          $ref: '#/components/responses/GeneralError'
  /repositories/{repositoryName}/versions/{versionHash}/query:
    post:
      tags:
        - v2
      operationId: postRepositoryVersionHashQuery
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repositoryName
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        "422":
          $ref: '#/components/responses/ModelQlQueryExecutionFailed'
        default:
          $ref: '#/components/responses/GeneralError'

  /versions/{versionHash}:
    get:
      tags:
        - v2
      operationId: getVersionHash
      deprecated: true
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/versionDelta'
        default:
          $ref: '#/components/responses/GeneralError'
components:
  responses:
    "200":
      description: OK
      content:
        text/plain:
          schema:
            type: string
    "204":
      description: OK
      content:
        text/plain:
          schema:
            type: string
    "200json":
      description: OK
      content:
        application/json:
          schema:
            type: string

    "400":
      description: "Bad Request"
      content:
        application/problem+json:
          schema:
            $ref: 'problem.yaml#/Problem'
    "401":
      description: "Unauthorized"
      content:
        application/problem+json:
          schema:
            $ref: 'problem.yaml#/Problem'
    "403":
      description: "Forbidden"
      content:
        application/problem+json:
          schema:
            $ref: 'problem.yaml#/Problem'
    "404":
      description: "Not Found"
      content:
        application/problem+json:
          schema:
            $ref: 'problem.yaml#/Problem'
    "ModelQlQueryExecutionFailed":
      description: "A syntactically valid query failed to provide a result due to a mismatch of the query and the underlying data."
      content:
        text/plain:
          schema:
            type: string
            description: "Contains a technical error description why query execution failed."
            example: |-
              server version: 0.0.0
              Exception in thread "main" java.lang.IllegalArgumentException: At least one element was expected. it<1004>.typed().flatMap { ...
    GeneralError:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: 'problem.yaml#/Problem'

    "versionDelta":
      description: OK
      content:
        'application/x-modelix-objects':
          schema:
            type: string
        'application/x-modelix-objects-v2':
          schema:
            type: string
        'application/json':
          schema:
            type: object
        'text/plain':
          schema:
            type: string

  schemas:
    VersionDelta:
      title: VersionDelta
      type: object
      properties:
        versionHash:
            type: string
        baseVersion:
            type: string
        objects:
            $ref: '#/components/schemas/MapItem'
        objectsMap:
            $ref: '#/components/schemas/MapItem'
      required:
        - versionHash
        - objects
        - objectsMap
    MapItem:
      properties:
        value1:
          type: string
        value2:
          type: string
    BranchV1:
      x-modelix-media-type: 'application/x.modelix.branch+json;version=1'
      type: object
      properties:
        name:
          type: string
        current_hash:
          type: string
          example: 7fQeo*xrdfZuHZtaKhbp0OosarV5tVR8N3pW8JPkl7ZE
      required:
        - name
        - current_hash
