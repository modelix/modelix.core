# WARNING - EXPERIMENTAL
# This file was auto generated from the existing API using an IntelliJ plugin,
# see https://www.jetbrains.com/help/idea/openapi.html#generate_openapi
#
# Manual changes were done for this 'spec' to work in-place with the
# model-server for now. A lot of changes were done and are still necessary
# to make this OpenAPI a viable artifact. It will most likely be split
# into multiple OpenAPI files.

openapi: "3.0.3"
info:
  title: "model-server public API"
  description: "modelix public API"
  version: "1.0.0"
servers:
  - url: '/'
    description: model-server
paths:
  /v2/server-id:
    get:
      operationId: getServerId
      responses:
        "200":
          $ref: '#/components/responses/200'
  /v2/user-id:
    get:
      operationId: getUserId
      responses:
        "200":
          $ref: '#/components/responses/200'
  /v2/generate-client-id:
    post:
      operationId: postGenerateClientId
      responses:
        "200":
          $ref: '#/components/responses/200'
  /headers:
    get:
      operationId: getHeaders
      responses:
        "200":
          $ref: '#/components/responses/200'
  /health:
    get:
      operationId: getHealth
      responses:
        "200":
          $ref: '#/components/responses/200'
        "500":
          $ref: '#/components/responses/500'
  /v2/repositories:
    get:
      operationId: getRepositories
      responses:
        "200":
          $ref: '#/components/responses/200'
  /v2/repositories/{repository}/objects:
    put:
      operationId: putRepositoryObjects
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/200json'
  /v2/repositories/{repository}/branches:
    get:
      operationId: getRepositoryBranches
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200'
  /v2/repositories/{repository}/branches/{branch}:
    get:
      operationId: getRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/versionDelta'
#          content:
#            '*/*':
#              schema:
#                $ref: "#/components/schemas/VersionDelta"
    post:
      operationId: postRepositoryBranch
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
# this was autogenerated but will break tests
# we need to manually design the content to allow
# type safe access on our APIs
#      requestBody:
#        content:
#          '*/*':
#            schema:
#              type: string
##              $ref: "#/components/schemas/VersionDelta"
#        required: true
      responses:
        "200":
          $ref: '#/components/responses/versionDelta'
  /v2/repositories/{repository}/branches/{branch}/hash:
    get:
      operationId: getRepositoryBranchHash
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
  /v2/repositories/{repository}/branches/{branch}/listen:
    get:
      operationId: listenRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
        - name: Connection
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: string
        - name: Upgrade
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: string
        - name: Sec-WebSocket-Key
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: string
            Upgrade:
              required: true
              schema:
                type: string
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: string
  /v2/repositories/{repository}/branches/{branch}/poll:
    get:
      operationId: pollRepositoryBranch
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/versionDelta'
  /v2/repositories/{repository}/branches/{branch}/pollHash:
    get:
      operationId: pollRepositoryBranchHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/200'
  /v2/repositories/{repository}/branches/{branch}/query:
    post:
      operationId: postRepositoryBranchQuery
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: branch
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        "500":
          $ref: '#/components/responses/500'
  /v2/repositories/{repository}/init:
    post:
      operationId: initializeRepository
      parameters:
        - name: useRoleIds
          in: "query"
          required: false
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/versionDelta'
  /v2/repositories/{repository}/delete:
    post:
      operationId: deleteRepository
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: '#/components/responses/204'
        "404":
          $ref: '#/components/responses/404'
  /v2/repositories/{repository}/versions/{versionHash}:
    get:
      operationId: getRepositoryVersionHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /v2/repositories/{repository}/versions/{versionHash}/history/{oldestVersionHash}:
    get:
      operationId: getOldestVersionHash
      responses:
        "200":
          $ref: '#/components/responses/200'
      parameters:
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: oldestVersionHash
          in: "path"
          required: true
          schema:
            type: string
  /v2/repositories/{repository}/versions/{versionHash}/query:
    post:
      operationId: postRepositoryVersionHashQuery
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: repository
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
        "500":
          $ref: '#/components/responses/500'

  /v2/versions/{versionHash}:
    get:
      operationId: getVersionHash
      parameters:
        - name: lastKnown
          in: "query"
          required: false
          schema:
            type: string
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/versionDelta'
  /v2/versions/{versionHash}/history/{oldestVersionHash}:
    get:
      operationId: getOldestVersionHashForVersion
      responses:
        "200":
          $ref: '#/components/responses/200'
      parameters:
        - name: versionHash
          in: "path"
          required: true
          schema:
            type: string
        - name: oldestVersionHash
          in: "path"
          required: true
          schema:
            type: string
  /counter/{key}:
    post:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/200'
  /get/{key}:
    get:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
  /getAll:
    put:
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/200json'
  /getEmail:
    get:
      responses:
        "200":
          $ref: '#/components/responses/200'
  /getRecursively/{key}:
    get:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/200json'
  /poll/{key}:
    get:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
        - name: lastKnownValue
          in: "query"
          required: false
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "404":
          $ref: '#/components/responses/404'
        "200":
          $ref: '#/components/responses/200'
  /put/{key}:
    put:
      parameters:
        - name: key
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/200'
        "404":
          $ref: '#/components/responses/404'
  /putAll:
    put:
      responses:
        "403":
          $ref: '#/components/responses/403'
        "401":
          $ref: '#/components/responses/401'
        "500":
          $ref: '#/components/responses/500'
        "200":
          $ref: '#/components/responses/200'
        "404":
          $ref: '#/components/responses/404'
components:
  responses:
    "200":
      description: OK
      content:
        text/plain:
          schema:
            type: string
    "200json":
      description: OK
      content:
        application/json:
          schema:
            type: string
    "400":
      description: "Bad Request"
      content:
        text/plain:
          schema:
            type: string
    "401":
      description: "Unauthorized"
      content:
        text/plain:
          schema:
            type: string
    403:
      description: "Forbidden"
      content:
        text/plain:
          schema:
            type: string
    "404":
      description: "Not Found"
      content:
        text/plain:
          schema:
            type: string
    "500":
      description: "Internal Server Error"
      content:
        text/plain:
          schema:
            type: string
    "versionDelta":
      description: OK
      content:
        'application/x-modelix-objects':
          schema:
            type: string
        'application/json':
          schema:
            type: object
        'text/plain':
          schema:
            type: string
  schemas:
    VersionDelta:
      title: VersionDelta
      type: object
      properties:
        versionHash:
            type: string
        baseVersion:
            type: string
        objects:
            $ref: '#/components/schemas/MapItem'
        objectsMap:
            $ref: '#/components/schemas/MapItem'
      required:
        - versionHash
        - objects
        - objectsMap
    MapItem:
      properties:
        value1:
          type: string
        value2:
          type: string
