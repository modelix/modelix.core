{{>licenseInfo}}
package {{apiPackage}}

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
{{#featureResources}}
import {{packageName}}.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
{{/featureResources}}
import io.ktor.server.routing.*
import io.ktor.server.routing.RoutingContext
{{#imports}}import {{import}}
{{/imports}}

abstract class {{classname}} {
{{#operations}}
    {{#operation}}

        {{#vendorExtensions}}
            {{#x-modelix-media-type-handlers}}
                {{#entrySet}}

    /**{{#summary}}
     * {{.}}{{/summary}}
     *
     * {{unescapedNotes}}
     *
     * {{httpMethod}} {{path}}
     *
     {{#allParams}}
     * @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/allParams}}
     */
     {{#isDeprecated}}
     @Deprecated("deprecated flag is set in the OpenAPI specification")
     {{/isDeprecated}}
    abstract suspend fun RoutingContext.{{operationId}}{{#lambda.titlecase}}{{key}}{{/lambda.titlecase}}({{#allParams}}{{paramName}}: {{{dataType}}}{{^required}}?{{/required}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})

                {{/entrySet}}
            {{/x-modelix-media-type-handlers}}
            {{^x-modelix-media-type-handlers}}

    /**{{#summary}}
     * {{.}}{{/summary}}
     *
     * {{unescapedNotes}}
     *
     * {{httpMethod}} {{path}}
     *
     {{#allParams}}
     * @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/allParams}}
     */
    {{#isDeprecated}}
    @Deprecated("deprecated flag is set in the OpenAPI specification")
    {{/isDeprecated}}
    abstract suspend fun RoutingContext.{{operationId}}({{#allParams}}{{paramName}}: {{{dataType}}}{{^required}}?{{/required}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})

            {{/x-modelix-media-type-handlers}}
        {{/vendorExtensions}}

    {{/operation}}
{{/operations}}

    open fun installRoutes(route: Route) {
        route.apply { installGeneratedRoutes() }
    }

    private fun Route.installGeneratedRoutes() {
        {{#operations}}
            {{#operation}}
            install_{{operationId}}()
            {{/operation}}
        {{/operations}}
    }

    {{#operations}}
    {{#operation}}
    protected open fun Route.install_{{operationId}}() {
        {{#vendorExtensions}}
            {{#x-modelix-media-type-handlers}}
                {{#entrySet}}

                    accept(
                        {{#value}}
                            ContentType.parse("{{{.}}}"),
                        {{/value}}
                    ) {
                        {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}<Paths.{{operationId}}> { parameters ->
                            {{operationId}}{{#lambda.titlecase}}{{key}}{{/lambda.titlecase}}({{#allParams}}parameters.{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
                        }
                    }

                {{/entrySet}}
            {{/x-modelix-media-type-handlers}}
            {{^x-modelix-media-type-handlers}}

        {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}<Paths.{{operationId}}> { parameters ->
            {{operationId}}({{#allParams}}parameters.{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
        }

            {{/x-modelix-media-type-handlers}}
        {{/vendorExtensions}}
    }
    {{/operation}}
    {{/operations}}
}
