{{>licenseInfo}}
package {{apiPackage}}

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.response.*
{{#featureResources}}
import {{packageName}}.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
{{/featureResources}}
import io.ktor.server.routing.*
import io.ktor.util.pipeline.PipelineContext
{{#imports}}import {{import}}
{{/imports}}

{{#operations}}
fun Route.{{classname}}() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

{{#operation}}
    {{^featureResources}}
    route("{{path}}") {
        {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}} {
            {{#lambda.indented_12}}{{>libraries/ktor/_api_body}}{{/lambda.indented_12}}
        }
    }
    {{/featureResources}}
    {{#featureResources}}
    {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}<Paths.{{operationId}}> {
        {{#lambda.indented_8}}{{>libraries/ktor/_api_body}}{{/lambda.indented_8}}
    }
    {{/featureResources}}

{{/operation}}
}
{{/operations}}

abstract class ApiBase {
{{#operations}}
    {{#operation}}
    /**
     * {{httpMethod}} {{path}}
     */
    {{#isDeprecated}}
    @Deprecated("deprecated flag is set in the OpenAPI specification")
    {{/isDeprecated}}
    abstract suspend fun PipelineContext<Unit, ApplicationCall>.{{operationId}}({{#allParams}}{{paramName}}: {{{dataType}}}{{^required}}?{{/required}}{{#required}}{{#isNullable}}?{{/isNullable}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})

    {{/operation}}
{{/operations}}

    open fun installRoutes(route: Route) {
        route.apply { installGeneratedRoutes() }
    }

    private fun Route.installGeneratedRoutes() {
        {{#operations}}
            {{#operation}}
            install_{{operationId}}()
            {{/operation}}
        {{/operations}}
    }

    {{#operations}}
    {{#operation}}
    open protected fun Route.install_{{operationId}}() {
        {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}<Paths.{{operationId}}> { parameters ->
            {{#lambda.indented_8}}{{operationId}}({{#allParams}}parameters.{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}){{/lambda.indented_8}}
        }
    }
    {{/operation}}
    {{/operations}}
}
