package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Objects;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.SReference;
import org.jetbrains.mps.openapi.language.SProperty;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;

public class ANode extends SNode implements org.jetbrains.mps.openapi.model.SNode {
  private static String USER_OBJECT_KEY = ANode.class.getName();

  public static SNode wrap(org.jetbrains.mps.openapi.model.SNode nodeToWrap) {
    if (nodeToWrap == null) {
      return null;
    }
    if (nodeToWrap instanceof SNode) {
      // The purpose of ANode is to allow casts to jetbrains.mps.smodel.SNode.
      // No ANode required if it already is a subclass of jetbrains.mps.smodel.SNode.
      return ((SNode) nodeToWrap);
    }
    ANode instance = as_ile5t_a0a2a2(nodeToWrap.getUserObject(USER_OBJECT_KEY), ANode.class);
    if (instance == null) {
      instance = new ANode(nodeToWrap);
      nodeToWrap.putUserObject(USER_OBJECT_KEY, instance);
    }
    return instance;
  }

  public static org.jetbrains.mps.openapi.model.SNode unwrap(org.jetbrains.mps.openapi.model.SNode nodeToUnwrap) {
    if (nodeToUnwrap == null) {
      return null;
    }
    if (nodeToUnwrap instanceof ANode) {
      return ((ANode) nodeToUnwrap).node;
    }
    return nodeToUnwrap;
  }

  private org.jetbrains.mps.openapi.model.SNode node;

  public ANode(org.jetbrains.mps.openapi.model.SNode node) {
    super(new DummyConcept(), new DummySNodeId());
    this.node = node;

    // We don't really want to extend SNode, but some code in the editor is coupled to this class.
    // Here all fields of this class are set to null, because we override all methods.
    for (Field field : SNode.class.getDeclaredFields()) {
      field.setAccessible(true);
      if (Modifier.isStatic(field.getModifiers())) {
        continue;
      }
      if (Modifier.isFinal(field.getModifiers())) {
        continue;
      }
      if (Objects.equals(field.getName(), "myOwner")) {
        continue;
      }
      try {
        field.set(this, null);
      } catch (Exception ex) {
        throw new RuntimeException(ex);
      }
    }

  }

  @Nullable
  @Override
  public SModel getModel() {
    return node.getModel();
  }
  @Override
  public SNodeId getNodeId() {
    return node.getNodeId();
  }
  @NotNull
  @Override
  public SNodeReference getReference() {
    return new ANodeReference(node.getReference());
  }
  @NotNull
  @Override
  public SConcept getConcept() {
    return node.getConcept();
  }
  @Override
  public boolean isInstanceOfConcept(@NotNull SAbstractConcept concept) {
    return node.isInstanceOfConcept(concept);
  }
  @Override
  public String getPresentation() {
    return node.getPresentation();
  }
  @Nullable
  @Override
  public String getName() {
    return node.getName();
  }
  @Override
  public void addChild(@NotNull SContainmentLink link, @NotNull org.jetbrains.mps.openapi.model.SNode node) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void insertChildBefore(@NotNull SContainmentLink link, @NotNull org.jetbrains.mps.openapi.model.SNode node, @Nullable org.jetbrains.mps.openapi.model.SNode node1) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void insertChildAfter(@NotNull SContainmentLink link, @NotNull org.jetbrains.mps.openapi.model.SNode node, @Nullable org.jetbrains.mps.openapi.model.SNode node1) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void removeChild(@NotNull org.jetbrains.mps.openapi.model.SNode node) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void delete() {
    node.delete();
  }
  @NotNull
  @Override
  public SNode getContainingRoot() {
    return wrap(node.getContainingRoot());
  }
  @Nullable
  @Override
  public SContainmentLink getContainmentLink() {
    return node.getContainmentLink();
  }
  @Nullable
  @Override
  public org.jetbrains.mps.openapi.model.SNode getFirstChild() {
    return wrap(node.getFirstChild());
  }
  @Nullable
  @Override
  public org.jetbrains.mps.openapi.model.SNode getLastChild() {
    return wrap(node.getLastChild());
  }
  @Nullable
  @Override
  public SNode getPrevSibling() {
    return wrap(node.getPrevSibling());
  }
  @Nullable
  @Override
  public SNode getNextSibling() {
    return wrap(node.getNextSibling());
  }
  @NotNull
  @Override
  public List<SNode> getChildren(SContainmentLink link) {
    Iterable<? extends org.jetbrains.mps.openapi.model.SNode> children = node.getChildren(link);
    return Sequence.fromIterable(children).select(new ISelector<org.jetbrains.mps.openapi.model.SNode, SNode>() {
      public SNode select(org.jetbrains.mps.openapi.model.SNode it) {
        return wrap(it);
      }
    }).toListSequence();
  }
  @NotNull
  @Override
  public List<SNode> getChildren() {
    Iterable<? extends org.jetbrains.mps.openapi.model.SNode> children = node.getChildren();
    return Sequence.fromIterable(children).select(new ISelector<org.jetbrains.mps.openapi.model.SNode, SNode>() {
      public SNode select(org.jetbrains.mps.openapi.model.SNode it) {
        return wrap(it);
      }
    }).toListSequence();
  }
  @Override
  public void setReferenceTarget(@NotNull SReferenceLink link, @Nullable org.jetbrains.mps.openapi.model.SNode target) {
    this.node.setReferenceTarget(link, unwrap(target));
  }
  @Nullable
  @Override
  public SNode getReferenceTarget(@NotNull SReferenceLink link) {
    return wrap(node.getReferenceTarget(link));
  }
  @Nullable
  @Override
  public SReference getReference(@NotNull SReferenceLink link) {
    return AReference.wrap(node.getReference(link));
  }
  @Override
  public void setReference(@NotNull SReferenceLink link, @Nullable org.jetbrains.mps.openapi.model.SReference reference) {
    throw new UnsupportedOperationException();
  }
  @NotNull
  @Override
  public List<SReference> getReferences() {
    Iterable<? extends org.jetbrains.mps.openapi.model.SReference> references = node.getReferences();
    return Sequence.fromIterable(references).select(new ISelector<org.jetbrains.mps.openapi.model.SReference, SReference>() {
      public SReference select(org.jetbrains.mps.openapi.model.SReference it) {
        SReference r = new AReference(it);
        return r;
      }
    }).toListSequence();
  }
  @NotNull
  @Override
  public Iterable<SProperty> getProperties() {
    return node.getProperties();
  }
  @Override
  public boolean hasProperty(@NotNull SProperty property) {
    return node.hasProperty(property);
  }
  @Nullable
  @Override
  public String getProperty(@NotNull SProperty property) {
    return node.getProperty(property);
  }
  @Override
  public void setProperty(@NotNull SProperty property, @Nullable String value) {
    node.setProperty(property, value);
  }
  @Override
  public Object getUserObject(Object key) {
    return node.getUserObject(key);
  }
  @Override
  public void putUserObject(Object key, @Nullable Object value) {
    node.putUserObject(key, value);
  }
  @Override
  public Iterable<Object> getUserObjectKeys() {
    return node.getUserObjectKeys();
  }
  @Deprecated
  @Override
  public String getRoleInParent() {
    return node.getRoleInParent();
  }

  @Deprecated
  @Override
  public void setProperty(String string, String string1) {
    throw new UnsupportedOperationException();
  }
  @Deprecated
  @Override
  public Collection<String> getPropertyNames() {
    return IterableUtil.asList(node.getPropertyNames());
  }
  @Deprecated
  @Override
  public void setReferenceTarget(String string, @Nullable org.jetbrains.mps.openapi.model.SNode node) {
    throw new UnsupportedOperationException();
  }
  @Deprecated
  @Override
  public SNode getReferenceTarget(String string) {
    return wrap(node.getReferenceTarget(string));
  }
  @Deprecated
  @Override
  public SReference getReference(String role) {
    throw new UnsupportedOperationException();
  }
  @Deprecated
  @Override
  public void setReference(String string, @Nullable org.jetbrains.mps.openapi.model.SReference reference) {
    throw new UnsupportedOperationException();
  }
  @Deprecated
  @Override
  public void insertChildBefore(String role, org.jetbrains.mps.openapi.model.SNode newChild, @Nullable org.jetbrains.mps.openapi.model.SNode anchor) {
    node.insertChildBefore(role, newChild, unwrap(anchor));
  }
  @Deprecated
  @Override
  public void addChild(String role, org.jetbrains.mps.openapi.model.SNode newChild) {
    node.addChild(role, newChild);
  }
  @Deprecated
  @Override
  @NotNull
  public List<SNode> getChildren(String role) {
    Iterable<? extends org.jetbrains.mps.openapi.model.SNode> children = node.getChildren(role);
    return Sequence.fromIterable(children).select(new ISelector<org.jetbrains.mps.openapi.model.SNode, SNode>() {
      public SNode select(org.jetbrains.mps.openapi.model.SNode it) {
        return (SNode) (Object) it;
      }
    }).toListSequence();
  }






  @Override
  public String toString() {
    return "ANode";
  }
  @Override
  public void setId(@Nullable SNodeId id) {
    throw new UnsupportedOperationException();
  }
  @Override
  protected SNode firstChild() {
    throw new UnsupportedOperationException();
  }
  @Override
  protected SNode treePrevious() {
    throw new UnsupportedOperationException();
  }
  @Override
  public SNode treeNext() {
    throw new UnsupportedOperationException();
  }
  @Override
  protected SNode treeParent() {
    return wrap(node.getParent());
  }
  @Override
  protected void children_insertBefore(SNode anchor, @NotNull SNode node) {
    throw new UnsupportedOperationException();
  }
  @Override
  protected void children_remove(@NotNull SNode node) {
    throw new UnsupportedOperationException();
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o instanceof NodeToSNodeAdapter) {
      throw new RuntimeException("Forgot to wrap an SNode with an ANode?");
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    ANode that = (ANode) o;
    if ((node != null ? !(node.equals(that.node)) : that.node != null)) {
      return false;
    }

    return true;
  }
  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((node != null ? ((Object) node).hashCode() : 0));
    return result;
  }
  private static <T> T as_ile5t_a0a2a2(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
