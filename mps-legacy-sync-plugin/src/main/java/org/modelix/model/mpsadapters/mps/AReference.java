package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import jetbrains.mps.smodel.SReference;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeId;

public class AReference extends SReference {

  public static SReference wrap(org.jetbrains.mps.openapi.model.SReference refToWrap) {
    if (refToWrap == null) {
      return null;
    }
    if (refToWrap instanceof SReference) {
      return ((SReference) refToWrap);
    }
    return new AReference(refToWrap);
  }

  private org.jetbrains.mps.openapi.model.SReference reference;

  public AReference(org.jetbrains.mps.openapi.model.SReference reference) {
    super(reference.getLink(), null);
    this.reference = reference;
  }
  @Deprecated
  @Override
  public String getRole() {
    throw new UnsupportedOperationException();
  }
  @Override
  public SReferenceLink getLink() {
    return reference.getLink();
  }
  @Override
  public SNode getSourceNode() {
    return ANode.wrap(reference.getSourceNode());
  }
  @Override
  public SNodeReference getTargetNodeReference() {
    return new ANodeReference(reference.getTargetNodeReference());
  }
  @Nullable
  @Override
  public SModelReference getTargetSModelReference() {
    return reference.getTargetSModelReference();
  }
  @Nullable
  @Override
  public SNodeId getTargetNodeId() {
    return reference.getTargetNodeId();
  }
  @Override
  public void makeDirect() {
    throw new UnsupportedOperationException();
  }
  @Override
  public boolean makeIndirect() {
    throw new UnsupportedOperationException();
  }
  @Override
  public String getResolveInfo() {
    return null;
  }
  @Override
  public void setResolveInfo(String info) {
    throw new UnsupportedOperationException();
  }
  @Override
  protected SNode getTargetNode_internal(SReference.ProblemReporter report) {
    return ANode.wrap(reference.getTargetNode());
  }
}
