package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.api.IConcept;
import java.util.Objects;
import org.modelix.model.api.INode;
import org.jetbrains.mps.openapi.module.SModule;
import org.modelix.model.api.INodeReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.modelix.model.area.IArea;
import org.jetbrains.mps.openapi.module.SModuleFacet;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class JavaModuleFacetAsNode extends TreeElementAsNode<JavaModuleFacet> {

  private TreeElementAsNode.IPropertyAccessor<JavaModuleFacet> generatedAccessor = new ReadOnlyPropertyAccessor<JavaModuleFacet>() {
    @Override
    public String get(JavaModuleFacet element) {
      // Based on this, I would expect the value to be always true, if not for some legacy code https://github.com/JetBrains/MPS/blob/2820965ff7b8836ed1d14adaf1bde29744c88147/core/project/source/jetbrains/mps/project/facets/JavaModuleFacetImpl.java
      return Boolean.toString(true);
    }
  };

  private TreeElementAsNode.IPropertyAccessor<JavaModuleFacet> pathAccessor = new ReadOnlyPropertyAccessor<JavaModuleFacet>() {
    @Override
    public String get(JavaModuleFacet element) {
      if (element == null) {
        throw new IllegalStateException("The JavaModuleFacet should not be null");
      }
      String originalPath = check_r9f4ri_a0b0a0a0d(element.getClassesGen());
      String moduleRoot = null;
      if (element.getModule() instanceof AbstractModule) {
        AbstractModule module = ((AbstractModule) element.getModule());
        moduleRoot = check_r9f4ri_a0b0d0a0a0d(check_r9f4ri_a0a1a3a0a0a3(check_r9f4ri_a0a0b0d0a0a0d(module)));
      }
      String path = originalPath;
      if (moduleRoot != null && check_r9f4ri_a0f0a0a0d(originalPath, moduleRoot)) {
        path = "${module}" + originalPath.substring(moduleRoot.length());
      }
      return path;
    }

  };

  public JavaModuleFacetAsNode(@NotNull JavaModuleFacet facet) {
    super(facet);
  }

  @Nullable
  @Override
  public IConcept getConcept() {
    return SConceptAdapter.wrap(CONCEPTS.JavaModuleFacet$5E);
  }

  @Override
  protected TreeElementAsNode.IPropertyAccessor<JavaModuleFacet> getPropertyAccessor(String role) {
    if (Objects.equals(role, PROPS.generated$A44R.getName())) {
      return generatedAccessor;
    }
    if (Objects.equals(role, PROPS.path$A4yT.getName())) {
      return pathAccessor;
    }
    return super.getPropertyAccessor(role);
  }

  @Nullable
  @Override
  public String getRoleInParent() {
    return LINKS.facets$vw9T.getName();
  }

  @Nullable
  @Override
  public INode getParent() {
    SModule module = this.getElement().getModule();
    return (module == null ? null : new SModuleAsNode(module));
  }

  @NotNull
  @Override
  public INodeReference getReference() {
    SModule module = this.getElement().getModule();
    return new NodeReference(module.getModuleReference());
  }

  public static class NodeReference implements INodeReference {
    private SModuleReference moduleReference;

    public NodeReference(SModuleReference moduleReference) {
      this.moduleReference = moduleReference;
    }

    @Nullable
    @Override
    public INode resolveNode(@Nullable IArea area) {
      SModule module = check_r9f4ri_a0a0e71(((SModuleAsNode) new SModuleAsNode.NodeReference(moduleReference).resolveNode(area)));
      if (module == null) {
        return null;
      }
      SModuleFacet moduleFacet = module.getFacetOfType(JavaModuleFacet.FACET_TYPE);
      return new JavaModuleFacetAsNode(((JavaModuleFacet) moduleFacet));
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }

      NodeReference that = (NodeReference) o;
      if (!(Objects.equals(this.moduleReference, that.moduleReference))) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int result = 0;
      result = 31 * result + ((moduleReference != null ? moduleReference.hashCode() : 0));
      return result;
    }
    private static SModule check_r9f4ri_a0a0e71(SModuleAsNode checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getElement();
      }
      return null;
    }
  }

  private static String check_r9f4ri_a0b0a0a0d(IFile checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getPath();
    }
    return null;
  }
  private static String check_r9f4ri_a0b0d0a0a0d(IFile checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getPath();
    }
    return null;
  }
  private static IFile check_r9f4ri_a0a1a3a0a0a3(IFile checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getParent();
    }
    return null;
  }
  private static IFile check_r9f4ri_a0a0b0d0a0a0d(AbstractModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getDescriptorFile();
    }
    return null;
  }
  private static boolean check_r9f4ri_a0f0a0a0d(String checkedDotOperand, String moduleRoot) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.startsWith(moduleRoot);
    }
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept JavaModuleFacet$5E = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x1e9fde9535299166L, "org.modelix.model.repositoryconcepts.structure.JavaModuleFacet");
  }

  private static final class PROPS {
    /*package*/ static final SProperty generated$A44R = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x1e9fde9535299166L, 0x1e9fde9535299167L, "generated");
    /*package*/ static final SProperty path$A4yT = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x1e9fde9535299166L, 0x1e9fde9535299169L, "path");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink facets$vw9T = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, 0x1e9fde953529916cL, "facets");
  }
}
