package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.modelix.model.api.INode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SNodeAccessListener;
import org.jetbrains.mps.openapi.model.SNodeChangeListener;
import org.jetbrains.mps.openapi.model.SModelListener;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModelName;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class NodeToSModelAdapter implements SModel {

  public static SModel wrap(INode node, SRepository repository) {
    if (node == null) {
      return null;
    }
    return new NodeToSModelAdapter(node, repository);
  }

  private INode node;
  private SRepository repository;

  protected NodeToSModelAdapter(INode node, SRepository repository) {
    this.node = node;
    this.repository = repository;
    if (!(node.getConcept().isSubConceptOf(SConceptAdapter.wrap(CONCEPTS.Model$2P)))) {
      throw new RuntimeException("Not a model: " + node.getConcept());
    }
  }

  @Override
  public void addAccessListener(SNodeAccessListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void addChangeListener(SNodeChangeListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void addModelListener(SModelListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void addRootNode(SNode node) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public SNode createNode(@NotNull SConcept concept) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public SNode createNode(@NotNull SConcept concept, @Nullable SNodeId id) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @NotNull
  @Override
  public SModelId getModelId() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Deprecated
  @Override
  public String getModelName() {
    return getName().getValue();
  }
  @Override
  public ModelRoot getModelRoot() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public SModule getModule() {
    return NodeToSModuleAdapter.wrap(node.getParent(), repository);
  }
  @NotNull
  @Override
  public SModelName getName() {
    return new SModelName(node.getPropertyValue(PROPS.name$MnvL.getName()));
  }
  @Override
  public SNode getNode(SNodeId id) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @NotNull
  @Override
  public Iterable<SModel.Problem> getProblems() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @NotNull
  @Override
  public SModelReference getReference() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public SRepository getRepository() {
    return (repository != null ? repository : MPSModuleRepository.getInstance());
  }
  @Override
  public Iterable<SNode> getRootNodes() {
    Iterable<INode> rootNodes = node.getChildren(LINKS.rootNodes$jxXY.getName());
    return Sequence.fromIterable(rootNodes).select(new ISelector<INode, SNode>() {
      public SNode select(INode it) {
        SNode adapter = NodeToSNodeAdapter.wrap(it);
        ((NodeToSNodeAdapter) adapter).setModelMode(EModelMode.ADAPTER);
        return adapter;
      }
    });
  }
  @NotNull
  @Override
  public DataSource getSource() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public boolean isLoaded() {
    return true;
  }
  @Override
  public boolean isReadOnly() {
    return true;
  }
  @Override
  public void load() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void removeAccessListener(SNodeAccessListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void removeChangeListener(SNodeChangeListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void removeModelListener(SModelListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void removeRootNode(SNode node) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public void unload() {
    throw new UnsupportedOperationException("Not implemented");
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    NodeToSModelAdapter that = (NodeToSModelAdapter) o;
    if ((node != null ? !(node.equals(that.node)) : that.node != null)) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((node != null ? ((Object) node).hashCode() : 0));
    return result;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Model$2P = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, "org.modelix.model.repositoryconcepts.structure.Model");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink rootNodes$jxXY = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x69652614fd1c514L, "rootNodes");
  }
}
