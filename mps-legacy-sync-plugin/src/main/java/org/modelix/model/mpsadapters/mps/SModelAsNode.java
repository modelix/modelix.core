package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SModel;
import org.modelix.model.api.INode;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.ModelImports;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import org.jetbrains.mps.openapi.module.SModuleReference;
import java.util.Collections;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.area.IArea;
import org.modelix.model.api.IConcept;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModuleId;
import java.util.Objects;
import org.modelix.model.api.INodeReference;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class SModelAsNode extends TreeElementAsNode<SModel> implements INode {

  private static TreeElementAsNode.IPropertyAccessor<SModel> nameAccessor = new TreeElementAsNode.IPropertyAccessor<SModel>() {
    public String get(SModel element) {
      return element.getName().getLongName();
    }
    public String set(SModel element, String value) {
      throw new UnsupportedOperationException("Model name is read only");
    }
  };
  private static TreeElementAsNode.IPropertyAccessor<SModel> stereotypeAccessor = new TreeElementAsNode.IPropertyAccessor<SModel>() {
    public String get(SModel element) {
      String value = element.getName().getStereotype();
      if ("".equals(value)) return null; // default value is returned as not being set to avoid unnecessary synchronization
      return value;
    }
    public String set(SModel element, String value) {
      throw new UnsupportedOperationException("Stereotype is read only");
    }
  };
  private static TreeElementAsNode.IPropertyAccessor<SModel> idAccessor = new TreeElementAsNode.IPropertyAccessor<SModel>() {
    public String get(SModel element) {
      return element.getModelId().toString();
    }
    public String set(SModel element, String value) {
      throw new UnsupportedOperationException("Model ID is read only");
    }
  };

  private static TreeElementAsNode.IChildAccessor<SModel> rootNodesAccessor = new TreeElementAsNode.IChildAccessor<SModel>() {
    public Iterable<INode> get(SModel element) {
      Iterable<SNode> nodes = element.getRootNodes();
      return Sequence.fromIterable(nodes).select(new ISelector<SNode, INode>() {
        public INode select(SNode it) {
          return SNodeToNodeAdapter.wrap(it);
        }
      });
    }
  };

  private static TreeElementAsNode.IChildAccessor<SModel> modelImportsAccessor = new TreeElementAsNode.IChildAccessor<SModel>() {
    public Iterable<INode> get(final SModel element) {
      Iterable<SModelReference> importedModelRefs = new ModelImports(element).getImportedModels();
      Iterable<SModel> importedModels = Sequence.fromIterable(importedModelRefs).select(new ISelector<SModelReference, SModel>() {
        public SModel select(SModelReference it) {
          return it.resolve(element.getRepository());
        }
      }).where(new NotNullWhereFilter());
      return Sequence.fromIterable(importedModels).select(new ISelector<SModel, ModelImportAsNode>() {
        public ModelImportAsNode select(SModel it) {
          return new ModelImportAsNode(it, element);
        }
      });
    }
  };
  private static TreeElementAsNode.IChildAccessor<SModel> usedLanguagesAccessor = new TreeElementAsNode.IChildAccessor<SModel>() {
    public Iterable<INode> get(final SModel element) {
      if (element instanceof DefaultSModelDescriptor) {
        DefaultSModelDescriptor sdmd = ((DefaultSModelDescriptor) element);
        List<INode> res = ListSequence.fromList(new LinkedList<INode>());
        for (SLanguage languageId : CollectionSequence.fromCollection(sdmd.importedLanguageIds())) {
          int languageVersion = sdmd.getLanguageImportVersion(languageId);
          ListSequence.fromList(res).addElement(new SingleLanguageDependencyAsNode(languageId.getSourceModuleReference(), languageVersion, element));
        }
        for (SModuleReference devKit : ListSequence.fromList(sdmd.importedDevkits())) {
          ListSequence.fromList(res).addElement(new DevKitDependencyAsNode(devKit, element));
        }

        return res;
      }
      return Sequence.fromIterable(Collections.<INode>emptyList());
    }
    @Override
    public void remove(SModel element, INode childToRemove) {
      if (element instanceof DefaultSModelDescriptor) {
        DefaultSModelDescriptor sdmd = ((DefaultSModelDescriptor) element);
        if (childToRemove instanceof SingleLanguageDependencyAsNode) {
          SingleLanguageDependencyAsNode depToRemove = ((SingleLanguageDependencyAsNode) childToRemove);
          SLanguage languageToRemove = MetaAdapterFactory.getLanguage(depToRemove.getModuleReference());
          sdmd.deleteLanguageId(languageToRemove);
        } else {
          throw new IllegalStateException("The language to remove is not  SingleLanguageDependencyAsNode. Class: " + childToRemove.getClass());
        }
      } else {
        throw new IllegalStateException("The model is not a DefaultSModelDescriptor. Class: " + element.getClass());
      }
    }
  };

  public static SModelAsNode wrap(SModel model) {
    return (model == null ? null : new SModelAsNode(model));
  }

  public SModelAsNode(@NotNull SModel model) {
    super(model);
  }

  @NotNull
  @Override
  public IArea getArea() {
    return new MPSArea(getElement().getRepository());
  }

  @Override
  public IConcept getConcept() {
    return SConceptAdapter.wrap(CONCEPTS.Model$2P);
  }

  @Override
  protected TreeElementAsNode.IChildAccessor<SModel> getChildAccessor(String role) {
    if (role.equals(LINKS.rootNodes$jxXY.getName())) {
      return rootNodesAccessor;
    }
    if (role.equals(LINKS.modelImports$8DOI.getName())) {
      return SModelAsNode.modelImportsAccessor;
    }
    if (role.equals(LINKS.usedLanguages$QK4E.getName())) {
      return SModelAsNode.usedLanguagesAccessor;
    }
    return super.getChildAccessor(role);
  }
  @Override
  protected TreeElementAsNode.IPropertyAccessor<SModel> getPropertyAccessor(String role) {
    if (role.equals(PROPS.name$MnvL.getName())) {
      return nameAccessor;
    }
    if (role.equals(PROPS.id$lDUo.getName())) {
      return idAccessor;
    }
    if (role.equals(PROPS.stereotype$h7NZ.getName())) {
      return stereotypeAccessor;
    }
    return super.getPropertyAccessor(role);
  }
  @Override
  protected TreeElementAsNode.IReferenceAccessor<SModel> getReferenceAccessor(String role) {
    return super.getReferenceAccessor(role);
  }
  @Override
  public INode getParent() {
    return SModuleAsNode.wrap(getElement().getModule());
  }
  @Override
  public String getRoleInParent() {
    return LINKS.models$h3QT.getName();
  }

  @Nullable
  public SingleLanguageDependencyAsNode findSingleLanguageDependency(SModuleId dependencyId) {
    if (this.getElement() instanceof DefaultSModelDescriptor) {
      DefaultSModelDescriptor sdmd = ((DefaultSModelDescriptor) this.getElement());
      for (SLanguage entry : CollectionSequence.fromCollection(sdmd.importedLanguageIds())) {
        if (Objects.equals(check_v4c8ud_a0a0b0a0y(entry.getSourceModule()), dependencyId)) {
          return new SingleLanguageDependencyAsNode(entry.getSourceModuleReference(), sdmd.getLanguageImportVersion(entry), getElement());
        }
      }
    }
    return null;
  }
  @Nullable
  public DevKitDependencyAsNode findDevKitDependency(SModuleId dependencyId) {
    if (this.getElement() instanceof DefaultSModelDescriptor) {
      DefaultSModelDescriptor sdmd = ((DefaultSModelDescriptor) this.getElement());
      for (SModuleReference devKit : ListSequence.fromList(sdmd.importedDevkits())) {
        if (Objects.equals(devKit.getModuleId(), dependencyId)) {
          return new DevKitDependencyAsNode(devKit, getElement());
        }
      }
    }
    return null;
  }

  @NotNull
  @Override
  public INodeReference getReference() {
    return new NodeReference(getElement().getReference());
  }

  public static class NodeReference implements INodeReference {
    private SModelReference modelRef;

    public NodeReference(SModelReference modelRef) {
      this.modelRef = modelRef;
    }

    public SModelReference getModelRef() {
      return this.modelRef;
    }

    @NotNull
    @Override
    public String serialize() {
      return "mps-model:" + modelRef;
    }

    @Nullable
    @Override
    public SModelAsNode resolveNode(@Nullable IArea area) {
      final Wrappers._T<SRepository> repo = new Wrappers._T<SRepository>(null);
      if (area != null) {
        List<IArea> areas = area.collectAreas();
        repo.value = ListSequence.fromList(areas).ofType(MPSArea.class).select(new ISelector<MPSArea, SRepository>() {
          public SRepository select(MPSArea it) {
            return it.getRepository();
          }
        }).where((_FunctionTypes._return_P1_E0<Boolean, SRepository>) (_FunctionTypes._return_P1_E0) new NotNullWhereFilter()).first();
      }
      if (repo.value == null) {
        repo.value = MPSModuleRepository.getInstance();
      }
      final Wrappers._T<SModel> resolved = new Wrappers._T<SModel>(null);
      if (repo.value.getModelAccess().canRead()) {
        resolved.value = modelRef.resolve(repo.value);
      } else {
        repo.value.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            resolved.value = modelRef.resolve(repo.value);
          }
        });
      }
      return new SModelAsNode(resolved.value);
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }

      NodeReference that = (NodeReference) o;
      if (!(Objects.equals(this.modelRef, that.modelRef))) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int result = 0;
      result = 31 * result + ((modelRef != null ? modelRef.hashCode() : 0));
      return result;
    }
  }
  private static SModuleId check_v4c8ud_a0a0b0a0y(SModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModuleId();
    }
    return null;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Model$2P = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, "org.modelix.model.repositoryconcepts.structure.Model");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink rootNodes$jxXY = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x69652614fd1c514L, "rootNodes");
    /*package*/ static final SContainmentLink modelImports$8DOI = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x58dbe6e4d4f32eb8L, "modelImports");
    /*package*/ static final SContainmentLink usedLanguages$QK4E = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x4aaf28cf2092e98eL, "usedLanguages");
    /*package*/ static final SContainmentLink models$h3QT = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, 0x69652614fd1c512L, "models");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty id$lDUo = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x244b85440ee67212L, "id");
    /*package*/ static final SProperty stereotype$h7NZ = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x35307994bbd9588dL, "stereotype");
  }
}
