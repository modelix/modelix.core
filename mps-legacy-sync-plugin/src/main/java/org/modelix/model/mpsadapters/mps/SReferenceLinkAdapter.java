package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import org.modelix.model.api.IReferenceLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.MetaIdHelper;
import org.modelix.model.api.IConcept;

public class SReferenceLinkAdapter implements IReferenceLink {

  private SReferenceLink link;

  public SReferenceLinkAdapter(SReferenceLink link1) {
    link = link1;
  }

  public SReferenceLink getLink() {
    return link;
  }

  @NotNull
  @Override
  public String getUID() {
    return MetaIdHelper.getAssociation(link).serialize();
  }

  @NotNull
  @Override
  public IConcept getConcept() {
    return SConceptAdapter.wrap(link.getOwner());
  }

  @NotNull
  @Override
  public String getSimpleName() {
    return link.getName();
  }

  @NotNull
  @Override
  public IConcept getTargetConcept() {
    return new SConceptAdapter(link.getTargetConcept());
  }

  @Override
  public boolean isOptional() {
    return link.isOptional();
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    SReferenceLinkAdapter that = (SReferenceLinkAdapter) o;
    if ((link != null ? !(link.equals(that.link)) : that.link != null)) {
      return false;
    }

    return true;
  }
  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((link != null ? ((Object) link).hashCode() : 0));
    return result;
  }
}
