package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import org.modelix.model.api.INode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.api.IConceptReference;
import org.modelix.model.api.IConcept;
import org.modelix.model.area.IArea;
import org.modelix.model.api.ILanguageRepository;
import org.modelix.model.api.IChildLink;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.modelix.model.api.INodeReference;
import java.util.List;
import org.modelix.model.api.IProperty;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.modelix.model.api.IReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public abstract class TreeElementAsNode<E> implements INode {

  protected static IPropertyAccessor dummyPropertyAccessor = new IPropertyAccessor<Object>() {
    public String get(Object element) {
      return null;
    }
    public String set(Object element, String value) {
      throw new UnsupportedOperationException();
    }
  };
  protected static IChildAccessor dummyChildAccessor = new IChildAccessor<Object>() {
    public Iterable<INode> get(Object element) {
      return Sequence.fromIterable(Collections.<INode>emptyList());
    }
  };

  private final E element;

  public TreeElementAsNode(@NotNull E element1) {
    element = element1;
  }

  @Nullable
  @Override
  public IConceptReference getConceptReference() {
    return check_bnhhyh_a0a8(getConcept(), this);
  }

  @NotNull
  @Override
  public abstract IConcept getConcept();

  @NotNull
  @Override
  public IArea getArea() {
    return new MPSArea();
  }

  @Override
  public boolean isValid() {
    return true;
  }

  protected IPropertyAccessor<E> getPropertyAccessor(String role) {
    if (role.equals(PROPS.shortDescription$Yd4v.getName())) {
      return dummyPropertyAccessor;
    }
    if (role.equals(PROPS.virtualPackage$EkXl.getName())) {
      return dummyPropertyAccessor;
    }
    return null;
  }

  protected IChildAccessor<E> getChildAccessor(String role) {
    if (role.equals(LINKS.smodelAttribute$KJ43.getName())) {
      return dummyChildAccessor;
    }
    return null;
  }
  protected IReferenceAccessor<E> getReferenceAccessor(String role) {
    return null;
  }

  public E getElement() {
    return element;
  }

  @Override
  public void moveChild(String role, int index, INode node) {
    throw new UnsupportedOperationException();
  }
  @Override
  public INode addNewChild(String role, int index, @Nullable IConcept concept) {
    IChildAccessor accessor = getChildAccessor(role);
    if (accessor == null) {
      throw new RuntimeException("No accessor defined for child '" + role + "' in " + this.getClass().getCanonicalName());
    }
    return accessor.add(element, role, index, concept);
  }
  @NotNull
  @Override
  public INode addNewChild(@Nullable String role, int index, @Nullable IConceptReference conceptRef) {
    IConcept concept = (conceptRef == null ? null : ILanguageRepository.Companion.resolveConcept(conceptRef));
    return addNewChild(role, index, concept);
  }
  @Override
  public void removeChild(INode child) {
    String role = child.getRoleInParent();
    IChildAccessor accessor = getChildAccessor(role);
    if (accessor == null) {
      throw new RuntimeException("No accessor defined for child '" + role + "' in " + this.getClass().getCanonicalName());
    }
    accessor.remove(element, child);
  }
  @Override
  public Iterable<INode> getAllChildren() {
    IConcept concept = getConcept();
    if (concept == null) {
      return Collections.<INode>emptyList();
    }
    Iterable<IChildLink> links = concept.getAllChildLinks();
    return Sequence.fromIterable(links).select(new ISelector<IChildLink, IChildAccessor<E>>() {
      public IChildAccessor<E> select(IChildLink it) {
        return getChildAccessor(it.getName());
      }
    }).translate(new ITranslator2<IChildAccessor<E>, INode>() {
      public Iterable<INode> translate(IChildAccessor<E> it) {
        return it.get(element);
      }
    });
  }
  @Override
  public Iterable<INode> getChildren(String role) {
    IChildAccessor accessor = getChildAccessor(role);
    if (accessor == null) {
      throw new RuntimeException("No accessor defined for child '" + role + "' in " + this.getClass().getCanonicalName());
    }
    return accessor.get(element);
  }
  @Override
  public String getPropertyValue(String role) {
    IPropertyAccessor accessor = getPropertyAccessor(role);
    if (accessor == null) {
      throw new RuntimeException("No accessor defined for property '" + role + "'");
    }
    return accessor.get(element);
  }
  @Override
  public INode getReferenceTarget(String role) {
    IReferenceAccessor accessor = getReferenceAccessor(role);
    if (accessor == null) {
      throw new RuntimeException("No accessor defined for reference '" + role + "'");
    }
    return accessor.get(element);
  }
  @Nullable
  @Override
  public INodeReference getReferenceTargetRef(@NotNull String role) {
    return check_bnhhyh_a0a13(getReferenceTarget(role), this);
  }

  @Override
  public void setPropertyValue(String role, String value) {
    IPropertyAccessor accessor = getPropertyAccessor(role);
    if (accessor == null) {
      throw new RuntimeException("No accessor defined for property '" + role + "'");
    }
    accessor.set(element, value);
  }
  @Override
  public void setReferenceTarget(String role, INode target) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void setReferenceTarget(@NotNull String role, @Nullable INodeReference target) {
    throw new UnsupportedOperationException();
  }
  @NotNull
  @Override
  public List<String> getPropertyRoles() {
    IConcept concept = getConcept();
    if (concept == null) {
      return Collections.<String>emptyList();
    }
    List<IProperty> allProperties = concept.getAllProperties();
    return ListSequence.fromList(allProperties).select(new ISelector<IProperty, String>() {
      public String select(IProperty it) {
        return it.getName();
      }
    }).toListSequence();
  }
  @NotNull
  @Override
  public List<String> getReferenceRoles() {
    IConcept concept = getConcept();
    if (concept == null) {
      return Collections.<String>emptyList();
    }
    List<IReferenceLink> allReferenceLinks = concept.getAllReferenceLinks();
    return ListSequence.fromList(allReferenceLinks).select(new ISelector<IReferenceLink, String>() {
      public String select(IReferenceLink it) {
        return it.getName();
      }
    }).toListSequence();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    TreeElementAsNode that = (TreeElementAsNode) o;
    if ((element != null ? !(((Object) element).equals(that.element)) : that.element != null)) {
      return false;
    }

    return true;
  }
  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((element != null ? ((Object) element).hashCode() : 0));
    return result;
  }

  public interface IPropertyAccessor<E> {
    String get(E element);
    String set(E element, String value);
  }
  public interface IChildAccessor<E> {
    Iterable<INode> get(E element);
    default INode add(E element, String role, int index, @Nullable IConcept concept) {
      throw new UnsupportedOperationException("Cannot add child in role " + role);
    }
    default void remove(E element, INode childToRemove) {
      throw new UnsupportedOperationException("Cannot remove child " + childToRemove);
    }
  }
  public interface IReferenceAccessor<E> {
    INode get(E element);
    INode set(E element, INode target);
  }

  @Override
  public String toString() {
    return getClass().getSimpleName() + "[" + element + "]";
  }
  private static <E> IConceptReference check_bnhhyh_a0a8(IConcept checkedDotOperand, TreeElementAsNode<E> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference();
    }
    return null;
  }
  private static <E> INodeReference check_bnhhyh_a0a13(INode checkedDotOperand, TreeElementAsNode<E> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference();
    }
    return null;
  }

  private static final class PROPS {
    /*package*/ static final SProperty shortDescription$Yd4v = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x10d34f97574L, "shortDescription");
    /*package*/ static final SProperty virtualPackage$EkXl = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink smodelAttribute$KJ43 = MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute");
  }
}
