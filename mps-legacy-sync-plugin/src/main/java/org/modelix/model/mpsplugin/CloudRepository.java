package org.modelix.model.mpsplugin;

/*Generated by MPS */

import org.modelix.model.lazy.RepositoryId;
import org.modelix.model.api.IBranch;
import org.modelix.model.client.ActiveBranch;
import kotlin.jvm.functions.Function0;
import org.modelix.model.area.PArea;
import kotlin.Unit;
import java.util.function.Consumer;
import org.modelix.model.api.PNodeAdapter;
import org.modelix.model.api.ITree;
import kotlin.jvm.functions.Function1;
import org.jetbrains.mps.openapi.model.SNode;
import org.modelix.model.api.INode;
import org.modelix.model.mpsadapters.mps.NodeToSNodeAdapter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.modelix.model.api.IReadTransaction;
import jetbrains.mps.project.MPSProject;
import org.modelix.model.mpsadapters.mps.SConceptAdapter;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.modelix.model.api.IConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

/**
 * This pair (a ModelServer and a Repository) is equivalent to the coordinates of a git repository.
 * The ModelServer is more like a collection of several git repositories.
 */
public class CloudRepository implements ICloudRepository {

  private final ModelServerConnection modelServer;
  private final RepositoryId repositoryId;

  public CloudRepository(ModelServerConnection modelServer, RepositoryId repositoryId) {
    if (modelServer == null) {
      throw new IllegalArgumentException("modelServer should not be null");
    }
    if (repositoryId == null) {
      throw new IllegalArgumentException("repositoryId should not be null");
    }
    this.modelServer = modelServer;
    this.repositoryId = repositoryId;
  }

  public IBranch getBranch() {
    return getActiveBranch().getBranch();
  }

  public ActiveBranch getActiveBranch() {
    return modelServer.getActiveBranch(repositoryId);
  }

  public boolean isConnected() {
    return modelServer.isConnected();
  }

  public RepositoryId getRepositoryId() {
    return this.repositoryId;
  }
  public String presentation() {
    if (modelServer.getBaseUrl().endsWith("/")) {
      return modelServer.getBaseUrl() + getRepositoryId();
    }
    return modelServer.getBaseUrl() + "/" + getRepositoryId();
  }

  public String completeId() {
    if (modelServer.getBaseUrl().endsWith("/")) {
      return modelServer.getBaseUrl() + repositoryId;
    }
    return modelServer.getBaseUrl() + "/" + repositoryId;
  }

  public <T> T computeRead(final Function0<T> producer) {
    return modelServer.getInfoBranch().computeRead(new Function0<T>() {
      public T invoke() {
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        return new PArea(branch).executeRead(new Function0<T>() {
          public T invoke() {
            return producer.invoke();
          }
        });
      }
    });
  }

  public void runRead(final Runnable r) {
    new PArea(modelServer.getInfoBranch()).executeRead(new Function0<Unit>() {
      public Unit invoke() {
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        new PArea(branch).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            r.run();
            return Unit.INSTANCE;
          }
        });
        return Unit.INSTANCE;
      }
    });
  }
  /**
   * Consumer receives the root node
   */
  public void runRead(final Consumer<PNodeAdapter> consumer) {
    ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
    final IBranch branch = activeBranch.getBranch();
    final PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
    new PArea(branch).executeRead(new Function0<Unit>() {
      public Unit invoke() {
        consumer.accept(rootNode);
        return Unit.INSTANCE;
      }
    });
  }
  /**
   * Computer receives the root node
   * 
   * @param computer 
   * @param <T> 
   * @return 
   */
  public <T> T computeWrite(final Function1<PNodeAdapter, T> computer) {
    ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
    final IBranch branch = activeBranch.getBranch();
    final PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
    return new PArea(branch).executeWrite(new Function0<T>() {
      public T invoke() {
        return computer.invoke(rootNode);
      }
    });
  }

  /**
   * Consuter receives the root node
   */
  public void runWrite(final Consumer<PNodeAdapter> consumer) {
    ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
    final IBranch branch = activeBranch.getBranch();
    final PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
    new PArea(branch).executeWrite(new Function0<Unit>() {
      public Unit invoke() {
        consumer.accept(rootNode);
        return Unit.INSTANCE;
      }
    });
  }

  public void processProjects(final Consumer<SNode> consumer) {
    processRepoRoots(new Consumer<INode>() {
      public void accept(INode iNode) {
        SNode sNode = NodeToSNodeAdapter.wrap(iNode);
        if (SNodeOperations.isInstanceOf(sNode, CONCEPTS.Project$An)) {
          consumer.accept(SNodeOperations.cast(sNode, CONCEPTS.Project$An));
        }
      }
    });
  }

  public List<INode> repoRoots() {
    final List<INode> roots = ListSequence.fromList(new ArrayList<INode>());
    processRepoRoots(new Consumer<INode>() {
      public void accept(INode it) {
        ListSequence.fromList(roots).addElement(it);
      }
    });
    return roots;
  }

  public void processRepoRoots(final Consumer<INode> consumer) {
    new PArea(modelServer.getInfoBranch()).executeRead(new Function0<Unit>() {
      public Unit invoke() {
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        final PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
        new PArea(branch).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            for (INode child : Sequence.fromIterable(rootNode.getAllChildren())) {
              consumer.accept(child);
            }
            return Unit.INSTANCE;
          }
        });
        return Unit.INSTANCE;
      }
    });
  }

  public IReadTransaction getReadTransaction() {
    return this.getActiveBranch().getBranch().getReadTransaction();
  }

  public RootBinding getRootBinding() {
    return modelServer.getRootBinding(repositoryId);
  }

  public ProjectBinding addProjectBinding(long nodeId, MPSProject project, SyncDirection initialSyncDirection) {
    ProjectBinding binding = new ProjectBinding(project, nodeId, initialSyncDirection);
    addBinding(binding);
    return binding;
  }

  public void addTransientModuleBinding(INode node) {
    addBinding(new TransientModuleBinding(((PNodeAdapter) node).getNodeId()));
  }

  public void addBinding(Binding binding) {
    modelServer.addBinding(repositoryId, binding);
  }

  public void deleteRoot(final INode root) {
    new PArea(modelServer.getInfoBranch()).executeWrite(new Function0<Unit>() {
      public Unit invoke() {
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        final PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
        new PArea(branch).executeWrite(new Function0<Unit>() {
          public Unit invoke() {
            rootNode.removeChild(root);
            return Unit.INSTANCE;
          }
        });
        return Unit.INSTANCE;
      }
    });
  }

  public static CloudRepository fromPresentationString(String presentation) {
    int lastSlash = presentation.lastIndexOf("/");
    String url = presentation.substring(0, lastSlash);
    RepositoryId repositoryId = new RepositoryId(presentation.substring(lastSlash + 1));
    ModelServerConnection modelServer = ModelServerConnections.getInstance().ensureModelServerIsPresent(url);
    return new CloudRepository(modelServer, repositoryId);
  }

  public ModelServerConnection getModelServer() {
    return this.modelServer;
  }

  public INode createProject(final String name) {
    return computeWrite(new Function1<PNodeAdapter, INode>() {
      public INode invoke(PNodeAdapter rootNode) {
        INode newProject = rootNode.addNewChild(LINKS.projects$NW07.getName(), -1, SConceptAdapter.wrap(CONCEPTS.Project$An));
        newProject.setPropertyValue(PROPS.name$MnvL.getName(), name);
        return newProject;
      }
    });
  }
  public INode getProject(final String name) {
    return computeRead(new Function0<INode>() {
      public INode invoke() {
        INode project = null;
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
        for (INode child : Sequence.fromIterable(rootNode.getChildren(LINKS.projects$NW07.getName()))) {
          String projectName = child.getPropertyValue(PROPS.name$MnvL.getName());
          if (Objects.equals(projectName, name)) {
            project = child;
          }
        }
        return project;
      }
    });
  }

  public boolean hasModuleUnderProject(final long projectNodeId, final String moduleId) {
    return computeRead(new Function0<Boolean>() {
      public Boolean invoke() {
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
        PNodeAdapter projectNode = new PNodeAdapter(projectNodeId, rootNode.getBranch());
        return ListSequence.fromList(INodeUtils.getChidlrenAsList(projectNode, LINKS.modules$Bi3g.getName())).any(new IWhereFilter<INode>() {
          public boolean accept(INode it) {
            return Objects.equals(it.getPropertyValue(PROPS.id$7MjP.getName()), moduleId);
          }
        });
      }
    });
  }
  public boolean hasModuleInRepository(final String moduleId) {
    return computeRead(new Function0<Boolean>() {
      public Boolean invoke() {
        ActiveBranch activeBranch = modelServer.getActiveBranch(repositoryId);
        final IBranch branch = activeBranch.getBranch();
        PNodeAdapter rootNode = new PNodeAdapter(ITree.ROOT_ID, branch);
        return ListSequence.fromList(INodeUtils.getChidlrenAsList(rootNode, LINKS.modules$jBPn.getName())).any(new IWhereFilter<INode>() {
          public boolean accept(INode it) {
            return Objects.equals(it.getPropertyValue(PROPS.id$7MjP.getName()), moduleId);
          }
        });
      }
    });
  }


  public INode createModuleUnderProject(final long projectNodeId, final String moduleId, final String moduleName) {
    return computeWrite(new Function1<PNodeAdapter, INode>() {
      public INode invoke(PNodeAdapter rootNode) {
        PNodeAdapter projectNode = new PNodeAdapter(projectNodeId, rootNode.getBranch());
        INode newModule = projectNode.addNewChild(LINKS.modules$Bi3g.getName(), -1, SConceptAdapter.wrap(CONCEPTS.Module$4i));
        newModule.setPropertyValue(PROPS.id$7MjP.getName(), moduleId);
        newModule.setPropertyValue(PROPS.name$MnvL.getName(), moduleName);
        return newModule;
      }
    });
  }

  public INode createModuleUnderProject(INode cloudModule, String moduleId, String moduleName) {
    return createModuleUnderProject(INodeUtils.nodeIdAsLong(cloudModule), moduleId, moduleName);
  }

  public INode createNode(final INode parent, final SContainmentLink containmentLink, final IConcept concept, final Consumer<INode> initializer) {
    return computeWrite(new Function1<PNodeAdapter, INode>() {
      public INode invoke(PNodeAdapter rootNode) {
        INode newNode = parent.addNewChild(containmentLink.getName(), -1, concept);
        initializer.accept(newNode);
        return newNode;
      }
    });
  }
  public INode createNode(INode parent, SContainmentLink containmentLink, SConcept concept, Consumer<INode> initializer) {
    return createNode(parent, containmentLink, SConceptAdapter.wrap(concept), initializer);
  }

  public INode createModule(final String moduleName) {
    return this.computeWrite(new Function1<PNodeAdapter, INode>() {
      public INode invoke(PNodeAdapter rootNode) {
        return PNodeAdapterCreationMethods.createModuleInRepository(rootNode, moduleName);
      }
    });
  }
  @Override
  public int hashCode() {
    return this.modelServer.hashCode() + 7 * repositoryId.hashCode();
  }
  @Override
  public boolean equals(Object obj) {
    if (obj instanceof CloudRepository) {
      CloudRepository other = ((CloudRepository) obj);
      return Objects.equals(this.modelServer, other.modelServer) && Objects.equals(this.repositoryId, other.repositoryId);
    } else {
      return false;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Project$An = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, "org.modelix.model.repositoryconcepts.structure.Project");
    /*package*/ static final SConcept Module$4i = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, "org.modelix.model.repositoryconcepts.structure.Module");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink projects$NW07 = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c516L, 0x620a8558361d3e0cL, "projects");
    /*package*/ static final SContainmentLink modules$Bi3g = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, 0x37a0917d689de9e2L, "modules");
    /*package*/ static final SContainmentLink modules$jBPn = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c516L, 0x69652614fd1c517L, "modules");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty id$7MjP = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, 0x3aa34013f2a802e0L, "id");
  }
}
