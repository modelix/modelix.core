package org.modelix.model.mpsplugin;

/*Generated by MPS */

import jetbrains.mps.smodel.EditableModelDescriptor;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.extapi.model.TransientSModel;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.modelix.model.util.pmap.CustomPMap;
import org.modelix.model.util.pmap.SmallPMap;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.persistence.NullDataSource;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.ModelLoadResult;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNodeUndoableAction;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.command.CommandProcessor;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.editor.Document;
import jetbrains.mps.ide.undo.MPSUndoUtil;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

public class CloudTransientModel extends EditableModelDescriptor implements EditableSModel, IUserObjectContainer, TransientSModel {
  private static final Logger LOG = LogManager.getLogger(CloudTransientModel.class);

  private CustomPMap<Object, Object> userObjects = SmallPMap.Companion.empty();

  public CloudTransientModel(CloudTransientModule module, String name, SModelId modelId, long modelNodeId) {
    super(createModelRef(name, module.getModuleReference(), modelId), new NullDataSource());
  }

  public void dispose() {
  }

  @Override
  public <T> T getUserObject(UserObjectKey<T> key) {
    return (T) userObjects.get(key);
  }
  @Override
  public <T> void putUserObject(UserObjectKey<T> key, T value) {
    userObjects = userObjects.put(key, value);
  }
  @Override
  public void updateTimestamp() {
  }
  @Override
  public boolean needsReloading() {
    return false;
  }
  @NotNull
  @Override
  protected ModelLoadResult<SModel> createModel() {
    SModel smodel = new SModel(getReference()) {
      @Override
      protected void performUndoableAction(@NotNull SNodeUndoableAction action) {
        try {
          Project project = CommandProcessor.getInstance().getCurrentCommandProject();
          if (project == null) {
            return;
          }
          SRepository repository = ProjectHelper.getProjectRepository(project);
          if (repository == null) {
            return;
          }
          SNode affectedNode = action.getAffectedNode();
          if (affectedNode == null) {
            return;
          }
          SNode rootNode = affectedNode.getContainingRoot();
          Document doc = MPSUndoUtil.getDoc(repository, rootNode.getReference());
          MpsReplicatedRepository.documentChanged(MPSUndoUtil.getRefForDoc(doc));
        } catch (Exception ex) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("", ex);
          }
        }
      }
    };
    return new ModelLoadResult(smodel, ModelLoadingState.FULLY_LOADED);
  }
  @Override
  public boolean isChanged() {
    return false;
  }
  @Override
  public void save() {
  }
  @Override
  public void rename(String newModelName, boolean changeFile) {
    throw new UnsupportedOperationException();
  }
  @Override
  public boolean isReadOnly() {
    return false;
  }
  @Override
  public void reloadFromSource() {
    throw new UnsupportedOperationException();
  }
  private static SModelReference createModelRef(String modelName, SModuleReference moduleReference, SModelId modelId) {
    return PersistenceFacade.getInstance().createModelReference(moduleReference, modelId, modelName);
  }

}
