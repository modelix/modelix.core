package org.modelix.model.mpsplugin;

/*Generated by MPS */

import org.modelix.model.api.INodeReference;
import org.modelix.model.api.INode;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.area.IArea;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.modelix.model.mpsadapters.mps.SNodeToNodeAdapter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPointerOperations;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;
import org.modelix.model.lazy.INodeReferenceSerializer;
import org.jetbrains.annotations.NotNull;

public class ForeignNodeReference implements INodeReference {

  private String modelName;
  private String foreignId;

  public ForeignNodeReference(String modelName, String foreignId) {
    this.modelName = modelName;
    this.foreignId = foreignId;
  }

  public String getModelName() {
    return modelName;
  }

  public String getForeignId() {
    return foreignId;
  }

  @Override
  public INode resolveNode(@Nullable IArea area) {
    MPSModuleRepository repo = MPSModuleRepository.getInstance();
    return SNodeToNodeAdapter.wrap(check_e0to5m_a0b0k(getReference(repo), repo, this));
  }

  private class SimpleSNodeReference implements SNodeReference {

    private SModelReference sModelReference;
    private SNodeId sNodeId;

    private SimpleSNodeReference(SModelReference sModelReference, SNodeId sNodeId) {
      this.sModelReference = sModelReference;
      this.sNodeId = sNodeId;
    }

    @Nullable
    @Override
    public SNode resolve(SRepository repository) {
      SModel model = SPointerOperations.resolveModel(getModelReference(), repository);
      return model.getNode(getNodeId());
    }
    @Nullable
    @Override
    public SModelReference getModelReference() {
      return this.sModelReference;
    }
    @Nullable
    @Override
    public SNodeId getNodeId() {
      return this.sNodeId;
    }
  }

  public SNodeReference getReference(SRepository repository) {
    if (repository == null) {
      throw new IllegalArgumentException("repository should not be null");
    }
    SModelReference sModelReference = null;
    for (SModule module : Sequence.fromIterable(repository.getModules())) {
      for (SModel itModel : ListSequence.fromList(SModuleUtils.getModelsWithoutDescriptor(module))) {
        if (Objects.equals(itModel.getModelName(), modelName)) {
          sModelReference = itModel.getReference();
        }
      }
    }
    SNodeId sNodeId = new jetbrains.mps.smodel.SNodeId.Foreign("~" + foreignId);
    return new SimpleSNodeReference(sModelReference, sNodeId);
  }

  public static class ForeignNodeReferenceSerializer implements INodeReferenceSerializer {
    @Nullable
    @Override
    public String serialize(@NotNull INodeReference nr) {
      if (nr instanceof ForeignNodeReference) {
        ForeignNodeReference fnr = ((ForeignNodeReference) nr);
        return "->" + fnr.getModelName() + ":" + fnr.getForeignId();
      } else {
        return null;
      }
    }
    @Nullable
    @Override
    public INodeReference deserialize(@NotNull String refValueAsString) {
      if (refValueAsString.startsWith("->")) {
        String res = refValueAsString.substring("->".length());
        String modelName = res.split(":")[0];
        String foreignId = res.split(":")[1];
        INodeReference refValue = new ForeignNodeReference(modelName, foreignId);
        return refValue;
      } else {
        return null;
      }
    }
  }
  private static SNode check_e0to5m_a0b0k(SNodeReference checkedDotOperand, MPSModuleRepository repo, ForeignNodeReference checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repo);
    }
    return null;
  }
}
