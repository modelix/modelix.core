package org.modelix.model.mpsplugin;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.modelix.model.lazy.RepositoryId;
import java.util.List;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.Project;
import java.util.Set;
import jetbrains.mps.ide.MPSCoreComponents;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.vfs.VFSManager;
import jetbrains.mps.vfs.IFileSystem;
import jetbrains.mps.vfs.IFile;
import java.io.File;
import org.modelix.model.client.RestWebModelClient;
import org.modelix.model.lazy.CLVersion;
import kotlin.jvm.functions.Function0;
import org.modelix.model.lazy.CLTree;
import org.modelix.model.api.IBranch;
import org.modelix.model.metameta.MetaModelBranch;
import org.modelix.model.api.PBranch;
import org.modelix.model.api.IdGeneratorDummy;
import org.modelix.model.area.PArea;
import org.modelix.model.lazy.PrefetchCache;
import org.modelix.model.api.ITransaction;
import org.modelix.model.api.ITree;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.modelix.model.api.INode;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.modelix.model.api.PNodeAdapter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import jetbrains.mps.project.MPSExtentions;
import com.intellij.openapi.vfs.VirtualFileManager;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.ModuleId;
import java.util.UUID;
import jetbrains.mps.persistence.DefaultModelRoot;
import jetbrains.mps.project.structure.modules.SolutionKind;
import org.modelix.model.mpsadapters.mps.SConceptAdapter;
import org.jetbrains.mps.openapi.persistence.Memento;
import jetbrains.mps.persistence.MementoImpl;
import jetbrains.mps.project.structure.modules.ModuleFacetDescriptor;
import jetbrains.mps.project.facets.JavaModuleFacet;
import jetbrains.mps.smodel.GeneralModuleFactory;
import jetbrains.mps.persistence.LazyLoadFacility;
import jetbrains.mps.persistence.DefaultModelPersistence;
import org.jetbrains.mps.openapi.persistence.StreamDataSource;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.extapi.model.SModelData;
import java.io.IOException;
import org.jetbrains.concurrency.AsyncPromise;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import jetbrains.mps.project.AbstractModule;
import java.util.Iterator;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import org.jetbrains.mps.openapi.model.SModelName;
import jetbrains.mps.smodel.SModelId;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.DataSource;
import org.jetbrains.mps.openapi.persistence.ModelLoadingOption;
import org.jetbrains.mps.openapi.persistence.UnsupportedDataSourceException;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.smodel.DefaultSModel;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.persistence.ModelCannotBeCreatedException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class ModelCloudExporter {
  private static final String DEFAULT_BRANCH_NAME = "master";
  private static final String DEFAULT_URL = "http://localhost:28101/";
  private static final String DEFAULT_TREE_ID = "default";

  private String branchName = DEFAULT_BRANCH_NAME;
  private CloudRepository repositoryInModelServer;

  private boolean inCheckoutMode = false;

  public ModelCloudExporter setCheckoutMode() {
    inCheckoutMode = true;
    return this;
  }

  public ModelCloudExporter(@Nullable String url, @Nullable String repositoryId, @Nullable String branchName) {
    if ((url == null || url.length() == 0)) {
      url = DEFAULT_URL;
    }
    if (!(url.endsWith("/"))) {
      url += "/";
    }
    if ((repositoryId == null || repositoryId.length() == 0)) {
      repositoryId = DEFAULT_TREE_ID;
    }
    ModelServerConnection modelServer = ModelServerConnections.getInstance().getModelServer(url);
    if (modelServer == null) {
      throw new IllegalStateException("No ModelServer connection found for url " + url);
    }
    this.repositoryInModelServer = new CloudRepository(modelServer, new RepositoryId(repositoryId));
    if ((branchName != null && branchName.length() > 0)) {
      this.branchName = branchName;
    } else {
      this.branchName = DEFAULT_BRANCH_NAME;
    }
  }

  public ModelCloudExporter(CloudRepository treeInRepository, @Nullable String branchName) {
    this.repositoryInModelServer = treeInRepository;
    if (branchName == null) {
      this.branchName = DEFAULT_BRANCH_NAME;
    } else {
      this.branchName = branchName;
    }
  }

  public ModelCloudExporter(CloudRepository treeInRepository) {
    this(treeInRepository, treeInRepository.getActiveBranch().getBranchName());
  }

  public List<Solution> export(String exportPath, Project mpsProject) {
    return export(exportPath, null, mpsProject);
  }

  /**
   *
   *
   * @param exportPath
   * @param selectedMduleIds null indicates all modules
   * @param mpsProject
   * @return
   */
  public List<Solution> export(String exportPath, @Nullable Set<Long> selectedMduleIds, @Nullable Project mpsProject) {
    MPSCoreComponents coreComponents = ApplicationManager.getApplication().getComponent(MPSCoreComponents.class);
    VFSManager vfsManager = coreComponents.getPlatform().findComponent(VFSManager.class);
    IFileSystem fileSystem = vfsManager.getFileSystem(VFSManager.FILE_FS);
    IFile outputFolder = fileSystem.getFile(new File(exportPath));
    return export(outputFolder, selectedMduleIds, mpsProject);
  }

  public List<Solution> export(IFile outputFolder, Project mpsProject) {
    return export(outputFolder, null, mpsProject);
  }

  /**
   * This method is expected to be called when a user is present to see the notifications.
   *
   * @param outputFolder
   * @param selectedModuleIds null indicates all modules
   * @param mpsProject
   * @return
   */
  public List<Solution> export(final IFile outputFolder, @Nullable final Set<Long> selectedModuleIds, final Project mpsProject) {
    System.out.println("exporting to " + outputFolder.getPath());
    System.out.println("the output folder exists? " + outputFolder.exists());

    if (!(inCheckoutMode)) {
      outputFolder.deleteIfExists();
    }

    String url = repositoryInModelServer.getModelServer().getBaseUrl();
    RestWebModelClient client = new RestWebModelClient(url);
    RepositoryId repositoryId = repositoryInModelServer.getRepositoryId();
    String branchKey = repositoryId.getBranchKey(branchName);
    String versionHash = null;
    try {
      versionHash = client.get(branchKey);
    } catch (Exception e) {
      throw new RuntimeException("Issue retrieving key " + branchKey + " with base URL " + client.getBaseUrl(), e);
    }
    if ((versionHash == null || versionHash.length() == 0)) {
      throw new RuntimeException("No version found at " + url + "get/" + branchKey + ". Base URL " + client.getBaseUrl());
    }
    final CLVersion version = CLVersion.Companion.loadFromHash(versionHash, client.getStoreCache());
    if (version == null) {
      throw new RuntimeException("Branch " + branchKey + " references non-existent version " + versionHash);
    }
    return repositoryInModelServer.computeRead(new Function0<List<Solution>>() {
      public List<Solution> invoke() {
        final CLTree tree = version.getTree();
        final IBranch branch = new MetaModelBranch(new PBranch(tree, new IdGeneratorDummy()));
        return new PArea(branch).executeRead(new Function0<List<Solution>>() {
          public List<Solution> invoke() {
            return PrefetchCache.Companion.with(tree, new Function0<List<Solution>>() {
              public List<Solution> invoke() {
                ITransaction t = branch.getTransaction();
                Iterable<Long> moduleIds = t.getChildren(ITree.ROOT_ID, LINKS.modules$jBPn.getName());
                if (moduleIds != null && selectedModuleIds != null) {
                  moduleIds = Sequence.fromIterable(moduleIds).intersect(SetSequence.fromSet(selectedModuleIds));
                }

                // prefetch module contents
                tree.getDescendants(moduleIds, true);

                List<INode> modules = Sequence.fromIterable(moduleIds).select(new ISelector<Long, INode>() {
                  public INode select(Long it) {
                    INode n = new PNodeAdapter(it, branch);
                    return n;
                  }
                }).toListSequence();
                return createModules(modules, outputFolder, mpsProject);
              }
            });
          }
        });
      }
    });
  }

  /**
   * This method is expected to be called when a user is present to see the notifications.
   */
  private List<Solution> createModules(List<INode> modules, IFile outputFolder, Project mpsProject) {
    List<Solution> solutions = ListSequence.fromList(new LinkedList<Solution>());
    for (INode module : modules) {
      Solution s = createModule(module, outputFolder, mpsProject);
      if (s != null) {
        ListSequence.fromList(solutions).addElement(s);
      }
    }
    return solutions;
  }

  /**
   * We experienced issues with physical and virtual files being out of sync.
   * This method ensure that files are deleted, recursively both on the virtual filesystem and the physical filesystem
   */
  private void ensureDeletion(IFile virtualFile) {
    if (virtualFile.isDirectory()) {
      for (IFile child : ListSequence.fromList(virtualFile.getChildren())) {
        ensureDeletion(child);
      }
    } else {
      if (virtualFile.exists()) {
        virtualFile.delete();
      }
      File physicalFile = new File(virtualFile.getPath());
      physicalFile.delete();
    }
  }

  private void ensureDirDeletionAndRecreation(IFile virtualDir) {
    ensureDeletion(virtualDir);
    virtualDir.mkdirs();
  }

  /**
   * This method is expected to be called when a user is present to see the notification.
   */
  private Solution createModule(INode module, IFile outputFolder, Project mpsProject) {
    String name = module.getPropertyValue("name");
    String moduleIdAsString = module.getPropertyValue("id");
    if (moduleIdAsString == null) {
      ModelixNotifications.notifyError("Module without ID", "Module " + name + " has been stored without an ID. Please set the ID and check it out again");
      return null;
    }

    MPSCoreComponents coreComponents = ApplicationManager.getApplication().getComponent(MPSCoreComponents.class);
    VFSManager vfsManager = coreComponents.getPlatform().findComponent(VFSManager.class);
    IFileSystem fileSystem = vfsManager.getFileSystem(VFSManager.FILE_FS);
    if (!(inCheckoutMode)) {
      outputFolder.deleteIfExists();
    }
    IFile solutionFile = outputFolder.findChild(name).findChild("solution" + MPSExtentions.DOT_SOLUTION);
    final IFile solutionDir = outputFolder.findChild(name);
    if (inCheckoutMode) {
      ApplicationManager.getApplication().invokeAndWait(new Runnable() {
        @Override
        public void run() {
          VirtualFileManager.getInstance().syncRefresh();
          IFile modelsDirVirtual = solutionDir.findChild("models");
          ensureDirDeletionAndRecreation(modelsDirVirtual);
        }
      });
    }
    SolutionDescriptor descriptor = new SolutionDescriptor();
    descriptor.setNamespace(name);
    ModuleId solutionId = ModuleId.regular(UUID.fromString(moduleIdAsString));
    descriptor.setId(solutionId);
    descriptor.getModelRootDescriptors().add(DefaultModelRoot.createDescriptor(solutionFile.getParent(), solutionFile.getParent().findChild(Solution.SOLUTION_MODELS)));
    descriptor.setKind(SolutionKind.PLUGIN_OTHER);

    for (INode facet : Sequence.fromIterable(module.getChildren("facets"))) {
      if (facet.getConcept().isSubConceptOf(SConceptAdapter.wrap(CONCEPTS.JavaModuleFacet$5E))) {
        Memento javaFacetMemento = new MementoImpl();
        Memento javaFacetClassesMemento = javaFacetMemento.createChild("classes");
        javaFacetClassesMemento.put("generated", facet.getPropertyValue("generated"));
        javaFacetClassesMemento.put("path", facet.getPropertyValue("path").replaceAll("\\$\\{module\\}", solutionFile.getParent().toRealPath()));
        ModuleFacetDescriptor javaFacetDescriptor = new ModuleFacetDescriptor(JavaModuleFacet.FACET_TYPE, javaFacetMemento);
        descriptor.getModuleFacetDescriptors().add(javaFacetDescriptor);
      }
    }

    Solution solution = (Solution) new GeneralModuleFactory().instantiate(descriptor, solutionFile);
    if (mpsProject != null) {
      mpsProject.addModule(solution);
      if (solution.getRepository() == null) {
        solution.attach(mpsProject.getRepository());
      }
    }
    if (mpsProject != null && solution.getRepository() == null) {
      throw new IllegalStateException("The solution should be in a repo, so also the model will be in a repo and syncReference will not crash");
    }
    for (INode model : module.getChildren("models")) {
      createModel(solution, model);
    }
    solution.save();

    return solution;
  }

  /**
   * We had to copy it from https://github.com/JetBrains/MPS/blob/14b86a2f987cdd3fbcc72b9262e8b388f7a5fae3/core/persistence/source/jetbrains/mps/persistence/DefaultModelPersistence.java#L115
   */
  private static class PersistenceFacility extends LazyLoadFacility {
    /*package*/ PersistenceFacility(DefaultModelPersistence modelFactory, StreamDataSource dataSource) {
      super(modelFactory, dataSource, true);
    }
    @NotNull
    private StreamDataSource getSource0() {
      return (StreamDataSource) super.getSource();
    }
    @NotNull
    @Override
    public SModelHeader readHeader() throws ModelReadException {
      return ModelPersistence.loadDescriptor(getSource0());
    }
    @NotNull
    @Override
    public ModelLoadResult readModel(@NotNull SModelHeader header, @NotNull ModelLoadingState state) throws ModelReadException {
      return ModelPersistence.readModel(header, getSource0(), state);
    }
    @Override
    public boolean doesSaveUpgradePersistence(@NotNull SModelHeader header) {
      // not sure !=-1 is really needed, just left to be ensured about compatibility
      return header.getPersistenceVersion() != ModelPersistence.LAST_VERSION && header.getPersistenceVersion() != -1;
    }
    @Override
    public void saveModel(@NotNull final SModelHeader header, final SModelData modelData) throws IOException {
      final AsyncPromise<Boolean> res = new AsyncPromise<Boolean>();
      ThreadUtils.runInUIThreadNoWait(new Runnable() {
        public void run() {
          try {
            ModelPersistence.saveModel((SModel) modelData, getSource0(), header.getPersistenceVersion());
            res.setResult(true);
          } catch (ModelSaveException e) {
            e.printStackTrace();
            res.setResult(false);
          }
        }
      });
      if (!(res.get())) {
        throw new RuntimeException("Unable to save model");
      }
    }
  }

  private void createModel(AbstractModule module, INode model) {
    Iterator<ModelRoot> modelRootsIt = module.getModelRoots().iterator();
    if (!(modelRootsIt.hasNext())) {
      throw new IllegalStateException("Module has not default model root: " + module + " (" + module.getModuleName() + ")");
    }
    final DefaultModelRoot defaultModelRoot = ((DefaultModelRoot) modelRootsIt.next());
    final SModelName sModelName = new SModelName(model.getPropertyValue("name"));
    final SModelId imposedModelID = SModelId.fromString(model.getPropertyValue("id"));
    final ModelFactory modelFactory = new ModelPersistenceWithFixedId(module.getModuleReference(), imposedModelID) {
      @NotNull
      @Override
      public org.jetbrains.mps.openapi.model.SModel create(@NotNull DataSource dataSource, @NotNull SModelName modelName, @NotNull ModelLoadingOption... options) throws UnsupportedDataSourceException {
        // COPIED FROM https://github.com/JetBrains/MPS/blob/14b86a2f987cdd3fbcc72b9262e8b388f7a5fae3/core/persistence/source/jetbrains/mps/persistence/DefaultModelPersistence.java#L115

        if (!((supports(dataSource)))) {
          throw new UnsupportedDataSourceException(dataSource);
        }
        final SModelHeader header = SModelHeader.create(ModelPersistence.LAST_VERSION);
        final SModelReference modelReference = PersistenceFacade.getInstance().createModelReference(null, imposedModelID, modelName.getValue());
        header.setModelReference(modelReference);
        final DefaultSModelDescriptor rv = new DefaultSModelDescriptor(new PersistenceFacility(this, (StreamDataSource) dataSource), header);
        // Hack to ensure newly created model is indeed empty. Otherwise, with StreamDataSource pointing to existing model stream, an attempt to
        // do anything with the model triggers loading and the model get all the data. Two approaches deemed reasonable to tackle the issue:
        // (a) enforce clear empty model (why would anyone call #create() then)
        // (b) fail with error (too brutal?)
        // Another alternative considered is to tolerate any DataSource in DefaultSModelDescriptor (or its persistence counterpart), so that
        // one can create an empty model with NullDataSource, and later save with a proper DataSource (which yields more job to client and makes him
        // question why SModel.save() is there). This task is reasonable regardless of final approach taken, but would take more effort, hence the hack.
        if (dataSource.getTimestamp() != -1) {
          // chances are there's something in the stream already
          rv.replace(new DefaultSModel(modelReference, header));
          // model state is FULLY_LOADED, DataSource won't get read
        }
        return rv;
      }
    };
    // We create models asynchronously, similarly to what is done in mpsutil.smodule
    // this helps avoiding issues with VFS and physical FS being out of sync
    VirtualFileManager.getInstance().syncRefresh();
    final AsyncPromise<EditableSModel> res = new AsyncPromise<EditableSModel>();
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        try {
          System.out.println("creating model " + sModelName);
          EditableSModel smodel = (EditableSModel) defaultModelRoot.createModel(sModelName, null, null, modelFactory);
          System.out.println("  model " + sModelName + " created");
          res.setResult(smodel);
        } catch (ModelCannotBeCreatedException e) {
          res.setResult(null);
          throw new RuntimeException(e);
        }
      }
    });
    final EditableSModel smodel = res.get();
    if (smodel != null) {
      new ModelSynchronizer(((PNodeAdapter) model).getNodeId(), smodel, repositoryInModelServer).syncModelToMPS(((PNodeAdapter) model).getBranch().getTransaction().getTree(), true);
      module.getRepository().getModelAccess().runWriteAction(new Runnable() {
        public void run() {
          smodel.save();
          System.out.println("  model " + sModelName + " saved");
        }
      });
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink modules$jBPn = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c516L, 0x69652614fd1c517L, "modules");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept JavaModuleFacet$5E = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x1e9fde9535299166L, "org.modelix.model.repositoryconcepts.structure.JavaModuleFacet");
  }
}
