package org.modelix.model.mpsplugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import org.jetbrains.mps.openapi.model.SModelName;
import jetbrains.mps.persistence.DefaultModelRoot;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.persistence.ModelCannotBeCreatedException;
import org.apache.log4j.Level;
import java.util.List;
import jetbrains.mps.smodel.SModelStereotype;

public class SModuleUtils {
  private static final Logger LOG = LogManager.getLogger(SModuleUtils.class);
  public SModuleUtils() {
  }
  public static SModel createModel(final SModule _this, String name, SModelId id) {
    Iterable<ModelRoot> modelRoots = _this.getModelRoots();
    final SModelName modelName = new SModelName(name);
    DefaultModelRoot modelRoot = Sequence.fromIterable(modelRoots).ofType(DefaultModelRoot.class).findFirst(new IWhereFilter<DefaultModelRoot>() {
      public boolean accept(DefaultModelRoot it) {
        return it.canCreateModel(modelName);
      }
    });
    try {
      return modelRoot.createModel(modelName, null, null, new ModelPersistenceWithFixedId(_this.getModuleReference(), id));
    } catch (ModelCannotBeCreatedException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Failed to create model " + modelName, e);
      }
    }
    return null;
  }
  public static List<SModel> getModelsWithoutDescriptor(final SModule _this) {
    Iterable<SModel> models = _this.getModels();
    return Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !(SModelStereotype.isDescriptorModel(it));
      }
    }).toListSequence();
  }
}
