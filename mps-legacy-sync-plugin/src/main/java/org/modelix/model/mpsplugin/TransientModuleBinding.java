package org.modelix.model.mpsplugin;

/*Generated by MPS */

import java.util.concurrent.atomic.AtomicInteger;
import org.modelix.model.api.IBranch;
import org.modelix.model.area.PArea;
import kotlin.jvm.functions.Function0;
import org.modelix.model.api.PNodeAdapter;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TransientModuleBinding extends ModuleBinding {
  private static final AtomicInteger NAME_SEQUENCE = new AtomicInteger(0);

  private CloudTransientModule module;

  public TransientModuleBinding(long moduleNodeId) {
    super(moduleNodeId, SyncDirection.TO_MPS);
  }

  @Override
  public CloudTransientModule getModule() {
    return module;
  }

  @Override
  protected void doActivate() {
    final IBranch branch = getBranch();
    String moduleName = new PArea(branch).executeRead(new Function0<String>() {
      public String invoke() {
        return new PNodeAdapter(moduleNodeId, branch).getPropertyValue(PROPS.name$MnvL.getName());
      }
    });
    String moduleIdStr = new PArea(branch).executeRead(new Function0<String>() {
      public String invoke() {
        return new PNodeAdapter(moduleNodeId, branch).getPropertyValue(PROPS.id$7MjP.getName());
      }
    });
    if ((moduleName == null || moduleName.length() == 0)) {
      moduleName = "cloud.module" + NAME_SEQUENCE.incrementAndGet();
    }
    ModuleId moduleId = ModuleId.foreign(getCloudRepository().completeId() + "-" + Long.toHexString(moduleNodeId));

    if (moduleIdStr != null) {
      ModuleId temptativeModuleId = ModuleId.fromString(moduleIdStr);
      // This could happen because someone clone a module to Modelix and then try to bind it.
      // In this case we want to give a warning to the user
      if (CloudTransientModules.getInstance().isModuleIdUsed(temptativeModuleId)) {
        ModelixNotifications.notifyWarning("Module ID already used", "We cannot load the module with the ID " + temptativeModuleId + " as the module id seems to be already used. We will load it with module id " + moduleId + " instead");
      } else {
        moduleId = temptativeModuleId;
      }
    }
    module = CloudTransientModules.getInstance().createModule(moduleName, moduleId);
    super.doActivate();
  }

  @Override
  protected void doDeactivate() {
    super.doDeactivate();
    SharedExecutors.FIXED.execute(new Runnable() {
      public void run() {
        synchronized (TransientModuleBinding.this) {
          MPSModuleRepository.getInstance().getModelAccess().runWriteAction(new Runnable() {
            public void run() {
              CloudTransientModules.getInstance().disposeModule(getModule());
            }
          });
        }
      }
    });
  }

  @Override
  protected Synchronizer<SModel> getModelsSynchronizer() {
    return new TransientModelsSynchronizer(getModuleNodeId(), getModule());
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty id$7MjP = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, 0x3aa34013f2a802e0L, "id");
  }
}
