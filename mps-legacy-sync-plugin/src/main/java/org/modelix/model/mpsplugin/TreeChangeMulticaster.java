package org.modelix.model.mpsplugin;

/*Generated by MPS */

import org.modelix.model.api.ITreeChangeVisitorEx;
import java.util.List;
import org.modelix.model.api.ITreeChangeVisitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

/**
 * ITree.visitChanges can be expensive. The performance is better if all listeners iterate over the changes together.
 */
public class TreeChangeMulticaster implements ITreeChangeVisitorEx {
  private List<ITreeChangeVisitor> visitors = ListSequence.fromList(new ArrayList<ITreeChangeVisitor>());

  public TreeChangeMulticaster(Iterable<ITreeChangeVisitor> visitors) {
    this.visitors = Sequence.fromIterable(visitors).toListSequence();
  }

  @Override
  public void childrenChanged(long parent, @Nullable String role) {
    for (ITreeChangeVisitor visitor : ListSequence.fromList(visitors)) {
      visitor.childrenChanged(parent, role);
    }
  }

  @Override
  public void containmentChanged(long node) {
    for (ITreeChangeVisitor visitor : ListSequence.fromList(visitors)) {
      visitor.containmentChanged(node);
    }
  }
  @Override
  public void propertyChanged(long node, @NotNull String role) {
    for (ITreeChangeVisitor visitor : ListSequence.fromList(visitors)) {
      visitor.propertyChanged(node, role);
    }
  }
  @Override
  public void referenceChanged(long node, @NotNull String role) {
    for (ITreeChangeVisitor visitor : ListSequence.fromList(visitors)) {
      visitor.referenceChanged(node, role);
    }
  }
  @Override
  public void nodeAdded(long node) {
    for (ITreeChangeVisitorEx visitor : ListSequence.fromList(visitors).ofType(ITreeChangeVisitorEx.class)) {
      visitor.nodeAdded(node);
    }
  }
  @Override
  public void nodeRemoved(long node) {
    for (ITreeChangeVisitorEx visitor : ListSequence.fromList(visitors).ofType(ITreeChangeVisitorEx.class)) {
      visitor.nodeRemoved(node);
    }
  }
}
