package org.modelix.model.mpsplugin;

/*Generated by MPS */

import org.modelix.model.api.ITreeChangeVisitorEx;
import java.util.List;
import de.q60.mps.incremental.runtime.DependencyKey;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.modelix.model.api.IBranch;
import org.modelix.model.api.INodeReference;
import org.modelix.model.api.PNodeAdapter;
import de.q60.mps.shadowmodels.runtime.engine.ContainmentDependency;
import org.jetbrains.annotations.Nullable;
import de.q60.mps.shadowmodels.runtime.engine.RoleDependency;
import de.q60.mps.shadowmodels.runtime.engine.AllChildrenDependency;
import de.q60.mps.shadowmodels.runtime.model.persistent.SM_PNodeDependency;

public class TreeChangesCollector implements ITreeChangeVisitorEx {
  private final List<DependencyKey> changes = ListSequence.fromList(new ArrayList<DependencyKey>());
  private IBranch branch;

  public TreeChangesCollector(IBranch branch) {
    this.branch = branch;
  }

  public INodeReference toNodeRef(long nodeId) {
    return new PNodeAdapter(nodeId, branch).getReference();
  }

  @Override
  public void containmentChanged(long nodeId) {
    ListSequence.fromList(changes).addElement(new ContainmentDependency(toNodeRef(nodeId)));
  }

  @Override
  public void childrenChanged(long nodeId, @Nullable String role) {
    ListSequence.fromList(changes).addElement(new RoleDependency(toNodeRef(nodeId), role));
    ListSequence.fromList(changes).addElement(new AllChildrenDependency(toNodeRef(nodeId)));
  }

  @Override
  public void referenceChanged(long nodeId, String role) {
    ListSequence.fromList(changes).addElement(new RoleDependency(toNodeRef(nodeId), role));
  }

  @Override
  public void propertyChanged(long nodeId, String role) {
    ListSequence.fromList(changes).addElement(new RoleDependency(toNodeRef(nodeId), role));
  }

  @Override
  public void nodeRemoved(long nodeId) {
    ListSequence.fromList(changes).addElement(new SM_PNodeDependency(branch, nodeId));
  }

  @Override
  public void nodeAdded(long nodeId) {
    ListSequence.fromList(changes).addElement(new SM_PNodeDependency(branch, nodeId));
  }

  public Iterable<DependencyKey> getChanges() {
    return this.changes;
  }
}
