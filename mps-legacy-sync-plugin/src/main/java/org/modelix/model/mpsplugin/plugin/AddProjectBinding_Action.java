package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.modelix.model.mpsplugin.history.TreeNodeClassification;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.api.PNodeAdapter;
import org.modelix.model.lazy.RepositoryId;
import org.modelix.model.mpsplugin.history.RepositoryTreeNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import javax.swing.tree.TreeNode;
import org.modelix.model.area.PArea;
import kotlin.jvm.functions.Function0;
import java.util.Objects;
import com.intellij.openapi.ui.Messages;
import org.modelix.model.mpsplugin.ModelServerConnection;
import org.modelix.model.mpsplugin.history.ModelServerTreeNode;
import org.modelix.model.mpsplugin.CloudRepository;
import org.modelix.model.mpsplugin.ModelCloudImportUtils;
import org.modelix.model.mpsplugin.SyncDirection;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AddProjectBinding_Action extends BaseAction {
  private static final Icon ICON = null;

  public AddProjectBinding_Action() {
    super("Bind to Current Project", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(TreeNodeClassification.isProjectNode(event.getData(MPSCommonDataKeys.TREE_NODE)))) {
      return false;
    }
    CloudNodeTreeNode nodeTreeNode = as_8zbn8k_a0a1a4(event.getData(MPSCommonDataKeys.TREE_NODE), CloudNodeTreeNode.class);
    long nodeId = ((PNodeAdapter) nodeTreeNode.getNode()).getNodeId();
    RepositoryId repositoryId = nodeTreeNode.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    if (nodeTreeNode.getModelServer().hasProjectBinding(repositoryId, nodeId)) {
      return false;
    }
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) event.getData(MPSCommonDataKeys.TREE_NODE);
    String expectedProjectName = new PArea(nodeTreeNode.getBranch()).executeRead(new Function0<String>() {
      public String invoke() {
        return nodeTreeNode.getNode().getPropertyValue(PROPS.name$MnvL.getName());
      }
    });
    if (!(Objects.equals(expectedProjectName, event.getData(MPSCommonDataKeys.MPS_PROJECT).getName()))) {
      int dialogResult = Messages.showOkCancelDialog(event.getData(MPSCommonDataKeys.MPS_PROJECT).getProject(), "Project names don't match. Do you want to bind '" + expectedProjectName + "' to '" + event.getData(MPSCommonDataKeys.MPS_PROJECT).getName() + "'?", "Bind Project", null);
      if (dialogResult != Messages.OK) {
        return;
      }
    }
    ModelServerConnection modelServer = nodeTreeNode.getAncestor(ModelServerTreeNode.class).getModelServer();
    RepositoryId repositoryId = nodeTreeNode.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    CloudRepository treeInRepository = new CloudRepository(modelServer, repositoryId);
    long cloudProjectId = ((PNodeAdapter) nodeTreeNode.getNode()).getNodeId();
    ModelCloudImportUtils.bindCloudProjectToMpsProject(treeInRepository, cloudProjectId, event.getData(MPSCommonDataKeys.MPS_PROJECT), SyncDirection.TO_MPS);
  }
  private static <T> T as_8zbn8k_a0a1a4(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
