package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import com.intellij.openapi.wm.ToolWindow;
import com.intellij.openapi.wm.ToolWindowFactory;
import com.intellij.openapi.wm.ToolWindowManager;
import com.intellij.ui.content.ContentFactory;
import jetbrains.mps.plugins.tool.GeneratedTool;
import javax.swing.Icon;

import org.jetbrains.annotations.NotNull;
import org.modelix.model.mpsplugin.history.CloudView;
import org.modelix.model.mpsplugin.history.HistoryView;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.wm.ToolWindowAnchor;
import org.modelix.model.mpsplugin.ModelServerConnection;
import org.modelix.model.lazy.RepositoryId;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.modelix.model.lazy.CLVersion;
import javax.swing.JComponent;

public class CloudHistoryTool_Tool implements ToolWindowFactory {
  private static final Icon ICON = IconContainer.ICON_a0_0;

  public static ToolWindow getToolWindow(Project project) {
    return ToolWindowManager.getInstance(project).getToolWindow("Modelix History");
  }

  public static HistoryView getInstance(Project project) {
    return (HistoryView) getToolWindow(project).getContentManager().getContent(0).getComponent();
  }

  private HistoryView component;
  private ToolWindow toolWindow;
  public static void load(Project project, ModelServerConnection modelServer, RepositoryId repositoryId, _FunctionTypes._return_P0_E0<? extends CLVersion> headVersion) {
    getInstance(project).loadHistory(modelServer, repositoryId, headVersion);
    getToolWindow(project).show();
  }
  @Override
  public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {
    this.toolWindow = toolWindow;
    component = new HistoryView();
    toolWindow.getContentManager().addContent(ContentFactory.SERVICE.getInstance().createContent(component, "Modelix Server", false));
  }
}
