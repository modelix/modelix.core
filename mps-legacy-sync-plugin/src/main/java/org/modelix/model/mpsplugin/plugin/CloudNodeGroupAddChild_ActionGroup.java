package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.workbench.action.ApplicationPlugin;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.api.INode;
import org.modelix.model.api.PNodeAdapter;
import org.modelix.model.api.IConcept;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.modelix.model.mpsadapters.mps.SConceptAdapter;
import org.modelix.model.mpsplugin.ModelixNotifications;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.language.LanguageRegistry;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class CloudNodeGroupAddChild_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "org.modelix.model.mpsplugin.plugin.CloudNodeGroupAddChild_ActionGroup";
  private final Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());

  public CloudNodeGroupAddChild_ActionGroup(@NotNull ApplicationPlugin plugin) {
    super("Add Child Node", ID, plugin);
    setIsInternal(false);
    setPopup(true);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    MPSProject project = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    CloudNodeTreeNode treeNode = as_pvys46_a0a2a4(event.getData(MPSCommonDataKeys.TREE_NODE), CloudNodeTreeNode.class);
    if (treeNode == null) {
      return;
    }
    INode node = treeNode.getNode();
    if (!(node instanceof PNodeAdapter)) {
      return;
    }
    PNodeAdapter pnode = ((PNodeAdapter) node);
    IConcept concept = pnode.getConcept();
    if (concept == null) {
      return;
    }
    SAbstractConcept sconcept = SConceptAdapter.unwrap(concept);
    if (sconcept == null) {
      ModelixNotifications.notifyError("Unable to unwrap concept", "We were unable to unwrap concept " + concept.getLongName() + " (" + concept.getClass().getCanonicalName() + ")", project);
      return;
    }

    Iterable<SLanguage> allLanguages_ = LanguageRegistry.getInstance(project.getRepository()).getAllLanguages();
    Set<SLanguage> allLanguages = SetSequence.fromSetWithValues(new HashSet<SLanguage>(), allLanguages_);

    for (SContainmentLink role : CollectionSequence.fromCollection(sconcept.getContainmentLinks())) {
      if (Objects.equals(role, LINKS.smodelAttribute$KJ43)) {
        continue;
      }
      Iterable<SAbstractConcept> subConcepts = SConceptOperations.getAllSubConcepts(role.getTargetConcept(), allLanguages);
      subConcepts = Sequence.fromIterable(subConcepts).where(new IWhereFilter<SAbstractConcept>() {
        public boolean accept(SAbstractConcept it) {
          return !(it.isAbstract());
        }
      });
      if (Objects.equals(role, LINKS.rootNodes$jxXY)) {
        subConcepts = Sequence.fromIterable(subConcepts).ofType(SConcept.class).where(new IWhereFilter<SConcept>() {
          public boolean accept(SConcept it) {
            return it.isRootable();
          }
        }).ofType(SAbstractConcept.class);
      }
      subConcepts = Sequence.fromIterable(subConcepts).sort(new ISelector<SAbstractConcept, String>() {
        public String select(SAbstractConcept it) {
          return it.getLanguage().getQualifiedName();
        }
      }, true).alsoSort(new ISelector<SAbstractConcept, String>() {
        public String select(SAbstractConcept it) {
          return it.getName();
        }
      }, true);
      for (SAbstractConcept subconcept : Sequence.fromIterable(subConcepts)) {
        CloudNodeGroupAddChild_ActionGroup.this.addParameterizedAction(new AddChildNode_Action(node, subconcept, role), node, subconcept, role);
      }
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
  private static <T> T as_pvys46_a0a2a4(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink smodelAttribute$KJ43 = MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute");
    /*package*/ static final SContainmentLink rootNodes$jxXY = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x69652614fd1c514L, "rootNodes");
  }
}
