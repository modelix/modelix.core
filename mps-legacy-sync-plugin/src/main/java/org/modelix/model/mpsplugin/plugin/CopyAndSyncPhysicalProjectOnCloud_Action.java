package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.modelix.model.mpsplugin.CloudRepository;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.modelix.model.mpsplugin.ModelCloudImportUtils;

public class CopyAndSyncPhysicalProjectOnCloud_Action extends BaseAction {
  private static final Icon ICON = null;

  private CloudRepository treeInRepository;
  private SNode cloudProject;
  public CopyAndSyncPhysicalProjectOnCloud_Action(CloudRepository treeInRepository_par, SNode cloudProject_par) {
    super("Copy on Cloud & Sync", "", ICON);
    this.treeInRepository = treeInRepository_par;
    this.cloudProject = cloudProject_par;
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.UNDO_PROJECT);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (CopyAndSyncPhysicalProjectOnCloud_Action.this.cloudProject == null) {
      event.getPresentation().setText("Copy on Cloud and Sync -> " + CopyAndSyncPhysicalProjectOnCloud_Action.this.treeInRepository.presentation() + " as new project");

    } else {
      CopyAndSyncPhysicalProjectOnCloud_Action.this.treeInRepository.runRead(new Runnable() {
        public void run() {
          event.getPresentation().setText("Sync to Cloud Repo " + CopyAndSyncPhysicalProjectOnCloud_Action.this.treeInRepository.presentation() + " to project " + INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(CopyAndSyncPhysicalProjectOnCloud_Action.this.cloudProject));
        }
      });
    }
    // TODO verify it is not already stored
    return CopyAndSyncPhysicalProjectOnCloud_Action.this.treeInRepository.isConnected();
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    ModelCloudImportUtils.copyAndSyncInModelixAsEntireProject(CopyAndSyncPhysicalProjectOnCloud_Action.this.treeInRepository, event.getData(MPSCommonDataKeys.MPS_PROJECT), CopyAndSyncPhysicalProjectOnCloud_Action.this.cloudProject);
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(treeInRepository_State((CloudRepository) this.treeInRepository));
    res.append("!");
    res.append(cloudProject_State((SNode) this.cloudProject));
    res.append("!");
    return res.toString();
  }
  public static String treeInRepository_State(CloudRepository object) {
    return object.presentation();
  }
  public static String cloudProject_State(SNode object) {
    return (String) INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(object);
  }
}
