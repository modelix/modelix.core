package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.part.ProjectPluginPart;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.MPSProject;
import org.modelix.model.mpsplugin.projectview.CloudProjectViewExtension;
import jetbrains.mps.ide.project.ProjectHelper;

public class ProjectPlugin_ProjectPluginPart extends ProjectPluginPart {
  private static final Logger LOG = LogManager.getLogger(ProjectPlugin_ProjectPluginPart.class);
  public ProjectPlugin_ProjectPluginPart() {
  }
  @Override
  public void init(MPSProject project) {
    EModelixExecutionMode executionMode = ModelixConfigurationSystemProperties.getExecutionMode();
    if (executionMode == EModelixExecutionMode.MODEL_EXPORT) {
      return;
    }

    CloudProjectViewExtension.getInstance(project).init();
    if (ModelixConfigurationSystemProperties.shouldLoadPersistentBinding()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("APPLYING PROJECT PLUGIN - PERSISTED BINDING CONFIGURATION. Loading persisted binding is enabled");
      }
      PersistedBindingConfiguration.getInstance(ProjectHelper.toIdeaProject(project)).applyToProject();
    } else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("APPLYING PROJECT PLUGIN - PERSISTED BINDING CONFIGURATION. Loading persisted binding disabled, skipping");
      }
    }
  }
  @Override
  public void dispose(MPSProject project) {
    EModelixExecutionMode executionMode = ModelixConfigurationSystemProperties.getExecutionMode();
    if (executionMode == EModelixExecutionMode.MODEL_EXPORT) {
      return;
    }

    CloudProjectViewExtension.getInstance(project).dispose();
    PersistedBindingConfiguration.disposeInstance(ProjectHelper.toIdeaProject(project));
  }
}
