package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.modelix.model.api.INode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import javax.swing.tree.TreeNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNodeBinding;
import kotlin.jvm.functions.Function0;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.ui.InputValidator;
import org.modelix.model.area.PArea;
import kotlin.Unit;

public class SetProperty_Action extends BaseAction {
  private static final Icon ICON = null;

  private INode node;
  private SProperty role;
  public SetProperty_Action(INode node_par, SProperty role_par) {
    super("Set Property '...'", "", ICON);
    this.node = node_par;
    this.role = role_par;
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    event.getPresentation().setText("Set Property '" + SetProperty_Action.this.role.getName() + "' (" + SetProperty_Action.this.role.getOwner().getName() + ")");
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) event.getData(MPSCommonDataKeys.TREE_NODE);

    String currentValue = CloudNodeTreeNodeBinding.getTreeInRepository(nodeTreeNode).computeRead(new Function0<String>() {
      public String invoke() {
        return nodeTreeNode.getNode().getPropertyValue(SetProperty_Action.this.role.getName());
      }
    });
    final String value = Messages.showInputDialog(event.getData(CommonDataKeys.PROJECT), "Value", "Set Property '" + SetProperty_Action.this.role.getName() + "'", null, currentValue, new InputValidator() {
      @Override
      public boolean checkInput(String s) {
        // TODO perhaps look into the type of the property to authorize it or not
        return true;
      }

      @Override
      public boolean canClose(String s) {
        return true;
      }
    });
    if (value == null) {
      return;
    }

    new PArea(nodeTreeNode.getBranch()).executeWrite(new Function0<Unit>() {
      public Unit invoke() {
        SetProperty_Action.this.node.setPropertyValue(SetProperty_Action.this.role.getName(), value);
        return Unit.INSTANCE;
      }
    });
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(node_State((INode) this.node));
    res.append("!");
    res.append(role_State((SProperty) this.role));
    res.append("!");
    return res.toString();
  }
  public static String node_State(INode object) {
    return object.toString();
  }
  public static String role_State(SProperty object) {
    return object.getName();
  }
}
