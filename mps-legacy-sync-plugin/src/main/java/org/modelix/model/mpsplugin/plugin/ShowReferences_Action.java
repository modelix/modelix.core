package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.modelix.model.mpsplugin.history.TreeNodeClassification;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import javax.swing.tree.TreeNode;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.mpsplugin.CloudRepository;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNodeBinding;
import org.modelix.model.api.INode;
import java.util.List;
import org.modelix.model.api.IReferenceLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.modelix.model.api.PNodeAdapter;
import java.util.Objects;
import com.intellij.openapi.ui.Messages;

public class ShowReferences_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowReferences_Action() {
    super("Show References", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return TreeNodeClassification.isProperNode(event.getData(MPSCommonDataKeys.TREE_NODE));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) event.getData(MPSCommonDataKeys.TREE_NODE);
    CloudRepository treeInRepository = CloudNodeTreeNodeBinding.getTreeInRepository(nodeTreeNode);
    // I need to know in which module to look for this node

    final StringBuilder sb = new StringBuilder();
    treeInRepository.runRead(new Runnable() {
      public void run() {
        INode node = nodeTreeNode.getNode();
        List<IReferenceLink> referenceLinks = node.getConcept().getAllReferenceLinks();
        for (String refLink : ListSequence.fromList(referenceLinks).select(new ISelector<IReferenceLink, String>() {
          public String select(IReferenceLink it) {
            return it.getName();
          }
        }).concat(ListSequence.fromList(node.getReferenceRoles())).distinct()) {
          sb.append(refLink);
          sb.append(" -> ");
          INode target = node.getReferenceTarget(refLink);
          if (target instanceof PNodeAdapter) {
            PNodeAdapter targetAsPNA = ((PNodeAdapter) target);
            if (!(Objects.equals(targetAsPNA.getBranch(), nodeTreeNode.getBranch()))) {
              sb.append("[branch " + targetAsPNA.getBranch().getId() + "] ");
            }
            sb.append("#");
            sb.append(Long.toHexString(targetAsPNA.getNodeId()));
          } else {
            sb.append(target);
          }
          sb.append("\n");
        }
      }
    });
    Messages.showMessageDialog(event.getData(CommonDataKeys.PROJECT), sb.toString(), "References", null);
  }
}
