package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.modelix.model.api.INode;
import org.modelix.model.api.IConcept;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INodeReference;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.area.IArea;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class ModelImportAsNode extends TreeElementAsNode<SModel> {
  private static TreeElementAsNode.IReferenceAccessor<SModel> modelAccessor = new TreeElementAsNode.IReferenceAccessor<SModel>() {
    public INode get(SModel model) {
      return SModelAsNode.wrap(model);
    }
    @Override
    public INode set(SModel element, INode target) {
      throw new UnsupportedOperationException("Read only");
    }
  };

  private SModel importingModel;

  public ModelImportAsNode(SModel importedModel, SModel importingModel) {
    super(importedModel);
    this.importingModel = importingModel;
  }

  @Override
  public IConcept getConcept() {
    return SConceptAdapter.wrap(CONCEPTS.ModelReference$sV);
  }

  @Override
  protected TreeElementAsNode.IChildAccessor<SModel> getChildAccessor(String role) {
    return super.getChildAccessor(role);
  }
  @Override
  protected TreeElementAsNode.IPropertyAccessor<SModel> getPropertyAccessor(String role) {
    return super.getPropertyAccessor(role);
  }
  @Override
  protected TreeElementAsNode.IReferenceAccessor<SModel> getReferenceAccessor(String role) {
    if (role.equals(LINKS.model$GJHn.getName())) {
      return modelAccessor;
    }
    return super.getReferenceAccessor(role);
  }
  @Override
  public INode getParent() {
    return new SModelAsNode(importingModel);
  }
  @Override
  public String getRoleInParent() {
    return LINKS.modelImports$8DOI.getName();
  }

  @NotNull
  @Override
  public INodeReference getReference() {
    return new NodeReference(getElement().getReference(), importingModel.getReference());
  }

  public static class NodeReference implements INodeReference {
    private SModelReference importedModelRef;
    private SModelReference importingModelRef;

    public NodeReference(SModelReference importedModelRef, SModelReference importingModelRef) {
      this.importedModelRef = importedModelRef;
      this.importingModelRef = importingModelRef;
    }

    @Nullable
    @Override
    public INode resolveNode(@Nullable IArea area) {
      SModel importedModel = check_c5rr7l_a0a0f61(new SModelAsNode.NodeReference(importedModelRef).resolveNode(area));
      if (importedModel == null) {
        return null;
      }
      SModel importingModel = check_c5rr7l_a0c0f61(new SModelAsNode.NodeReference(importingModelRef).resolveNode(area));
      if (importingModel == null) {
        return null;
      }
      return new ModelImportAsNode(importedModel, importingModel);
    }
    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }

      NodeReference that = (NodeReference) o;
      if ((importedModelRef != null ? !(importedModelRef.equals(that.importedModelRef)) : that.importedModelRef != null)) {
        return false;
      }
      if ((importingModelRef != null ? !(importingModelRef.equals(that.importingModelRef)) : that.importingModelRef != null)) {
        return false;
      }

      return true;
    }
    @Override
    public int hashCode() {
      int result = 0;
      result = 31 * result + ((importedModelRef != null ? ((Object) importedModelRef).hashCode() : 0));
      result = 31 * result + ((importingModelRef != null ? ((Object) importingModelRef).hashCode() : 0));
      return result;
    }
    public SModelReference getImportedModelRef() {
      return this.importedModelRef;
    }
    public SModelReference getImportingModelRef() {
      return this.importingModelRef;
    }
    private static SModel check_c5rr7l_a0a0f61(SModelAsNode checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getElement();
      }
      return null;
    }
    private static SModel check_c5rr7l_a0c0f61(SModelAsNode checkedDotOperand) {
      if (null != checkedDotOperand) {
        return checkedDotOperand.getElement();
      }
      return null;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ModelReference$sV = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x58dbe6e4d4f332a3L, "org.modelix.model.repositoryconcepts.structure.ModelReference");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink model$GJHn = MetaAdapterFactory.getReferenceLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x58dbe6e4d4f332a3L, 0x58dbe6e4d4f332a4L, "model");
    /*package*/ static final SContainmentLink modelImports$8DOI = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x58dbe6e4d4f32eb8L, "modelImports");
  }
}
