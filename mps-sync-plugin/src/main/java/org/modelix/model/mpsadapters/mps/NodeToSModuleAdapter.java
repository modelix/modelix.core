package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import org.modelix.model.api.INode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SModuleListener;
import org.jetbrains.mps.openapi.module.SDependency;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModuleFacet;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.module.SModuleId;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class NodeToSModuleAdapter implements SModule {

  public static SModule wrap(INode node, SRepository repository) {
    if (node == null) {
      return null;
    }
    return new NodeToSModuleAdapter(node, repository);
  }

  private INode node;
  private SRepository repository;

  protected NodeToSModuleAdapter(INode node, SRepository repository) {
    this.node = node;
    this.repository = repository;
    if (!(node.getConcept().isSubConceptOf(SConceptAdapter.wrap(CONCEPTS.Module$4i)))) {
      throw new RuntimeException("Not a module: " + node.getConcept());
    }
  }

  @Override
  public void addModuleListener(SModuleListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public Iterable<SDependency> getDeclaredDependencies() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Nullable
  @Override
  public <T extends SModuleFacet> T getFacet(@NotNull Class<T> aClass) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @NotNull
  @Override
  public Iterable<SModuleFacet> getFacets() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Nullable
  @Override
  public SModel getModel(SModelId id) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public Iterable<ModelRoot> getModelRoots() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @NotNull
  @Override
  public Iterable<SModel> getModels() {
    Iterable<INode> models = node.getChildren(LINKS.models$h3QT.getName());
    return Sequence.fromIterable(models).select(new ISelector<INode, SModel>() {
      public SModel select(INode it) {
        SModel adapter = NodeToSModelAdapter.wrap(it, repository);
        return adapter;
      }
    });
  }
  @Override
  public SModuleId getModuleId() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public String getModuleName() {
    return node.getPropertyValue(PROPS.name$MnvL.getName());
  }
  @NotNull
  @Override
  public SModuleReference getModuleReference() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Nullable
  @Override
  public SRepository getRepository() {
    return (repository != null ? repository : MPSModuleRepository.getInstance());
  }
  @Override
  public Set<SLanguage> getUsedLanguages() {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public int getUsedLanguageVersion(@NotNull SLanguage language) {
    throw new UnsupportedOperationException("Not implemented");
  }
  @Override
  public boolean isPackaged() {
    return false;
  }
  @Override
  public boolean isReadOnly() {
    return true;
  }
  @Override
  public void removeModuleListener(SModuleListener listener) {
    throw new UnsupportedOperationException("Not implemented");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Module$4i = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, "org.modelix.model.repositoryconcepts.structure.Module");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink models$h3QT = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, 0x69652614fd1c512L, "models");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
