package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.modelix.model.api.INode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.api.IConcept;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.modelix.model.api.INodeReference;
import java.util.Objects;
import org.modelix.model.area.IArea;
import java.util.List;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.ProjectManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class ProjectAsNode extends TreeElementAsNode<MPSProject> {
  private static TreeElementAsNode.IChildAccessor<MPSProject> modulesAccessor = new TreeElementAsNode.IChildAccessor<MPSProject>() {
    public Iterable<INode> get(MPSProject project) {
      return Sequence.fromIterable(Collections.<INode>emptyList());
    }
  };
  private static TreeElementAsNode.IChildAccessor<MPSProject> projectModulesAccessor = new TreeElementAsNode.IChildAccessor<MPSProject>() {
    public Iterable<INode> get(final MPSProject project) {
      Iterable<SModule> modules = project.getProjectModules();
      return Sequence.fromIterable(modules).select(new ISelector<SModule, ProjectModuleAsNode>() {
        public ProjectModuleAsNode select(SModule it) {
          return new ProjectModuleAsNode(project, it);
        }
      });
    }
  };
  private TreeElementAsNode.IPropertyAccessor<MPSProject> nameAccessor = new TreeElementAsNode.IPropertyAccessor<MPSProject>() {
    @Override
    public String get(MPSProject element) {
      return element.getName();
    }

    @Override
    public String set(MPSProject element, String value) {
      throw new UnsupportedOperationException("readonly");
    }
  };
  public ProjectAsNode(@NotNull MPSProject element) {
    super(element);
  }
  @Nullable
  @Override
  public IConcept getConcept() {
    return SConceptAdapter.wrap(CONCEPTS.Project$An);
  }
  @Nullable
  @Override
  public INode getParent() {
    return new SRepositoryAsNode(MPSModuleRepository.getInstance());
  }
  @NotNull
  @Override
  public INodeReference getReference() {
    return new NodeReference(getElement());
  }
  @Nullable
  @Override
  public String getRoleInParent() {
    return LINKS.projects$NW07.getName();
  }
  @Override
  protected TreeElementAsNode.IChildAccessor getChildAccessor(String role) {
    if (role.equals(LINKS.modules$Bi3g.getName())) {
      return modulesAccessor;
    }
    if (role.equals(LINKS.projectModules$VXcy.getName())) {
      return projectModulesAccessor;
    }
    return super.getChildAccessor(role);
  }
  @Override
  protected TreeElementAsNode.IPropertyAccessor<MPSProject> getPropertyAccessor(String role) {
    if (Objects.equals(role, PROPS.name$MnvL.getName())) {
      return this.nameAccessor;
    }
    return super.getPropertyAccessor(role);
  }

  public static class NodeReference implements INodeReference {
    private String projectName;
    private String path;

    public NodeReference(MPSProject project) {
      this.projectName = project.getName();
      this.path = project.getProject().getPresentableUrl();
    }

    public NodeReference(String projectName, String path) {
      this.projectName = projectName;
      this.path = path;
    }

    @NotNull
    @Override
    public String serialize() {
      return "mps-project:" + projectName;
    }

    public String getProjectName() {
      return this.projectName;
    }

    @Nullable
    @Override
    public ProjectAsNode resolveNode(@Nullable IArea area) {
      List<Project> projects = ProjectManager.getInstance().getOpenedProjects();
      MPSProject project = ListSequence.fromList(projects).ofType(MPSProject.class).findFirst(new IWhereFilter<MPSProject>() {
        public boolean accept(MPSProject it) {
          return Objects.equals(it.getName(), projectName) && Objects.equals(it.getProject().getPresentableUrl(), path);
        }
      });
      return (project == null ? null : new ProjectAsNode(project));
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }

      NodeReference that = (NodeReference) o;
      if ((path != null ? !(((Object) path).equals(that.path)) : that.path != null)) {
        return false;
      }
      if ((projectName != null ? !(((Object) projectName).equals(that.projectName)) : that.projectName != null)) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int result = 0;
      result = 31 * result + ((path != null ? String.valueOf(path).hashCode() : 0));
      result = 31 * result + ((projectName != null ? String.valueOf(projectName).hashCode() : 0));
      return result;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Project$An = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, "org.modelix.model.repositoryconcepts.structure.Project");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink projects$NW07 = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c516L, 0x620a8558361d3e0cL, "projects");
    /*package*/ static final SContainmentLink modules$Bi3g = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, 0x37a0917d689de9e2L, "modules");
    /*package*/ static final SContainmentLink projectModules$VXcy = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, 0x3a4fe9e427e83268L, "projectModules");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
