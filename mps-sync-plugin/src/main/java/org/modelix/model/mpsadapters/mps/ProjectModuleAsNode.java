package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SModule;
import org.modelix.model.api.INode;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Objects;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.api.IConcept;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INodeReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.modelix.model.area.IArea;
import jetbrains.mps.project.structure.project.ModulePath;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class ProjectModuleAsNode extends TreeElementAsNode<Tuples._2<MPSProject, SModule>> {
  private TreeElementAsNode.IReferenceAccessor<Tuples._2<MPSProject, SModule>> moduleAccessor = new TreeElementAsNode.IReferenceAccessor<Tuples._2<MPSProject, SModule>>() {
    @Override
    public INode get(Tuples._2<MPSProject, SModule> element) {
      return new SModuleAsNode(element._1());
    }

    @Override
    public INode set(Tuples._2<MPSProject, SModule> element, INode target) {
      throw new UnsupportedOperationException("readonly");
    }
  };
  private TreeElementAsNode.IPropertyAccessor<Tuples._2<MPSProject, SModule>> virtualFolderAccessor = new TreeElementAsNode.IPropertyAccessor<Tuples._2<MPSProject, SModule>>() {
    @Override
    public String get(Tuples._2<MPSProject, SModule> element) {
      return check_9jclrw_a0a0a0a1(element._0().getPath(element._1()));
    }

    @Override
    public String set(Tuples._2<MPSProject, SModule> element, String value) {
      element._0().setVirtualFolder(element._1(), value);
      return value;
    }
  };

  public ProjectModuleAsNode(MPSProject project, SModule module) {
    super(MultiTuple.<MPSProject,SModule>from(project, module));
  }

  @Override
  protected TreeElementAsNode.IReferenceAccessor<Tuples._2<MPSProject, SModule>> getReferenceAccessor(String role) {
    if (Objects.equals(role, LINKS.module$DFjI.getName())) {
      return this.moduleAccessor;
    }
    return super.getReferenceAccessor(role);
  }
  @Override
  protected TreeElementAsNode.IPropertyAccessor<Tuples._2<MPSProject, SModule>> getPropertyAccessor(String role) {
    if (Objects.equals(role, PROPS.virtualFolder$dgnn.getName())) {
      return this.virtualFolderAccessor;
    }
    return super.getPropertyAccessor(role);
  }
  @Nullable
  @Override
  public IConcept getConcept() {
    return SConceptAdapter.wrap(CONCEPTS.ProjectModule$uf);
  }
  @Override
  public INode getParent() {
    return new ProjectAsNode(getElement()._0());
  }
  @NotNull
  @Override
  public INodeReference getReference() {
    return new NodeReference((ProjectAsNode.NodeReference) getParent().getReference(), getElement()._1().getModuleReference());
  }
  @Nullable
  @Override
  public String getRoleInParent() {
    return LINKS.modules$Bi3g.getName();
  }

  public static class NodeReference implements INodeReference {
    private ProjectAsNode.NodeReference projectRef;
    private SModuleReference moduleRef;

    public NodeReference(ProjectAsNode.NodeReference projectRef, SModuleReference moduleRef) {
      this.projectRef = projectRef;
      this.moduleRef = moduleRef;
    }

    public SModuleReference getModuleRef() {
      return this.moduleRef;
    }

    public ProjectAsNode.NodeReference getProjectRef() {
      return this.projectRef;
    }

    @Nullable
    @Override
    public INode resolveNode(@Nullable IArea area) {
      MPSProject project = projectRef.resolveNode(area).getElement();
      SModule module = moduleRef.resolve(project.getRepository());
      return new ProjectModuleAsNode(project, module);
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || this.getClass() != o.getClass()) {
        return false;
      }

      NodeReference that = (NodeReference) o;
      if ((moduleRef != null ? !(moduleRef.equals(that.moduleRef)) : that.moduleRef != null)) {
        return false;
      }
      if ((projectRef != null ? !(projectRef.equals(that.projectRef)) : that.projectRef != null)) {
        return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int result = 0;
      result = 31 * result + ((moduleRef != null ? ((Object) moduleRef).hashCode() : 0));
      result = 31 * result + ((projectRef != null ? ((Object) projectRef).hashCode() : 0));
      return result;
    }
  }

  private static String check_9jclrw_a0a0a0a1(ModulePath checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getVirtualFolder();
    }
    return null;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink module$DFjI = MetaAdapterFactory.getReferenceLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x5040008087d5d3d4L, 0x5040008087d5d3edL, "module");
    /*package*/ static final SContainmentLink modules$Bi3g = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, 0x37a0917d689de9e2L, "modules");
  }

  private static final class PROPS {
    /*package*/ static final SProperty virtualFolder$dgnn = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x3a4fe9e427e83264L, 0x3a4fe9e427e83265L, "virtualFolder");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ProjectModule$uf = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x3a4fe9e427e83264L, "org.modelix.model.repositoryconcepts.structure.ProjectModule");
  }
}
