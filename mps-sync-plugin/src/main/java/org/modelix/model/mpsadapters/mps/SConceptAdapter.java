package org.modelix.model.mpsadapters.mps;

/*Generated by MPS */

import org.modelix.model.api.IConcept;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.IConceptReference;
import org.modelix.model.api.ConceptReference;
import jetbrains.mps.smodel.adapter.ids.MetaIdHelper;
import org.jetbrains.annotations.Nullable;
import org.modelix.model.api.ILanguage;
import java.util.List;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Collections;
import java.util.Objects;
import org.modelix.model.api.IProperty;
import org.jetbrains.mps.openapi.language.SProperty;
import org.modelix.model.api.IChildLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.modelix.model.api.IReferenceLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class SConceptAdapter implements IConcept {

  public static SAbstractConcept unwrap(IConcept concept) {
    if (concept == null) {
      return null;
    }
    if (concept instanceof SConceptAdapter) {
      return ((SConceptAdapter) concept).getAdapted();
    }
    return null;
  }

  public static IConcept wrap(SAbstractConcept concept) {
    if (concept == null) {
      return null;
    }
    return new SConceptAdapter(concept);
  }

  private SAbstractConcept concept;

  public SConceptAdapter(SAbstractConcept concept1) {
    concept = concept1;
  }

  @NotNull
  @Override
  public IConceptReference getReference() {
    return new ConceptReference(getUID());
  }

  public SAbstractConcept getAdapted() {
    return concept;
  }

  @Override
  public boolean isAbstract() {
    return concept.isAbstract();
  }

  @NotNull
  @Override
  public String getUID() {
    return "mps:" + MetaIdHelper.getConcept(concept).serialize();
  }

  @Nullable
  @Override
  public ILanguage getLanguage() {
    return new SLanguageAdapter(concept.getLanguage());
  }

  @NotNull
  @Override
  public List<IConcept> getDirectSuperConcepts() {
    Iterable<SAbstractConcept> superConcepts;
    if (concept instanceof SConcept) {
      SConcept c = ((SConcept) concept);
      Iterable<SInterfaceConcept> superInterfaces = c.getSuperInterfaces();
      superConcepts = Sequence.fromIterable(Sequence.<SAbstractConcept>singleton(c.getSuperConcept())).concat(Sequence.fromIterable(superInterfaces));
    } else if (concept instanceof SInterfaceConcept) {
      SInterfaceConcept c = ((SInterfaceConcept) concept);
      Iterable<SInterfaceConcept> superInterfaces = c.getSuperInterfaces();
      superConcepts = Sequence.fromIterable(superInterfaces).select(new ISelector<SInterfaceConcept, SInterfaceConcept>() {
        public SInterfaceConcept select(SInterfaceConcept it) {
          return it;
        }
      });
    } else {
      superConcepts = Sequence.fromIterable(Collections.<SAbstractConcept>emptyList());
    }

    return Sequence.fromIterable(superConcepts).select(new ISelector<SAbstractConcept, IConcept>() {
      public IConcept select(SAbstractConcept it) {
        IConcept adapter = new SConceptAdapter(it);
        return adapter;
      }
    }).toListSequence();
  }

  @NotNull
  @Override
  public String getLongName() {
    return concept.getLanguage().getQualifiedName() + "." + concept.getName();
  }

  @NotNull
  @Override
  public String getShortName() {
    return concept.getName();
  }

  @Override
  public boolean isSubConceptOf(IConcept superConcept) {
    return concept.isSubConceptOf(((SConceptAdapter) superConcept).concept);
  }

  @Override
  public boolean isExactly(IConcept otherConcept) {
    return Objects.equals(concept, ((SConceptAdapter) otherConcept).concept);
  }

  @Override
  public List<IProperty> getAllProperties() {
    Iterable<SProperty> properties = concept.getProperties();
    return Sequence.fromIterable(properties).select(new ISelector<SProperty, IProperty>() {
      public IProperty select(SProperty it) {
        IProperty p = new SPropertyAdapter(it);
        return p;
      }
    }).toListSequence();
  }

  @Override
  public List<IChildLink> getAllChildLinks() {
    Iterable<SContainmentLink> links = concept.getContainmentLinks();
    return Sequence.fromIterable(links).select(new ISelector<SContainmentLink, IChildLink>() {
      public IChildLink select(SContainmentLink it) {
        IChildLink l = new SContainmentLinkAdapter(it);
        return l;
      }
    }).toListSequence();
  }

  @Override
  public List<IReferenceLink> getAllReferenceLinks() {
    Iterable<SReferenceLink> links = concept.getReferenceLinks();
    return Sequence.fromIterable(links).select(new ISelector<SReferenceLink, IReferenceLink>() {
      public IReferenceLink select(SReferenceLink it) {
        IReferenceLink adapter = new SReferenceLinkAdapter(it);
        return adapter;
      }
    }).toListSequence();
  }

  @Override
  public IChildLink getChildLink(final String name) {
    return ListSequence.fromList(getAllChildLinks()).findFirst(new IWhereFilter<IChildLink>() {
      public boolean accept(IChildLink it) {
        return Objects.equals(it.getName(), name);
      }
    });
  }

  @Override
  public IProperty getProperty(final String name) {
    return ListSequence.fromList(getAllProperties()).findFirst(new IWhereFilter<IProperty>() {
      public boolean accept(IProperty it) {
        return Objects.equals(it.getName(), name);
      }
    });
  }

  @Override
  public IReferenceLink getReferenceLink(final String name) {
    return ListSequence.fromList(getAllReferenceLinks()).findFirst(new IWhereFilter<IReferenceLink>() {
      public boolean accept(IReferenceLink it) {
        return Objects.equals(it.getName(), name);
      }
    });
  }

  @NotNull
  @Override
  public List<IProperty> getOwnProperties() {
    Iterable<SProperty> properties = concept.getProperties();
    return Sequence.fromIterable(properties).where(new IWhereFilter<SProperty>() {
      public boolean accept(SProperty it) {
        return Objects.equals(it.getOwner(), concept);
      }
    }).select(new ISelector<SProperty, IProperty>() {
      public IProperty select(SProperty it) {
        IProperty p = new SPropertyAdapter(it);
        return p;
      }
    }).toListSequence();
  }

  @NotNull
  @Override
  public List<IChildLink> getOwnChildLinks() {
    Iterable<SContainmentLink> containmentLinks = concept.getContainmentLinks();
    return Sequence.fromIterable(containmentLinks).where(new IWhereFilter<SContainmentLink>() {
      public boolean accept(SContainmentLink it) {
        return Objects.equals(it.getOwner(), concept);
      }
    }).select(new ISelector<SContainmentLink, IChildLink>() {
      public IChildLink select(SContainmentLink it) {
        IChildLink l = new SContainmentLinkAdapter(it);
        return l;
      }
    }).toListSequence();
  }

  @NotNull
  @Override
  public List<IReferenceLink> getOwnReferenceLinks() {
    Iterable<SReferenceLink> referenceLinks = concept.getReferenceLinks();
    return Sequence.fromIterable(referenceLinks).where(new IWhereFilter<SReferenceLink>() {
      public boolean accept(SReferenceLink it) {
        return Objects.equals(it.getOwner(), concept);
      }
    }).select(new ISelector<SReferenceLink, IReferenceLink>() {
      public IReferenceLink select(SReferenceLink it) {
        IReferenceLink adapter = new SReferenceLinkAdapter(it);
        return adapter;
      }
    }).toListSequence();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    SConceptAdapter that = (SConceptAdapter) o;
    if ((concept != null ? !(concept.equals(that.concept)) : that.concept != null)) {
      return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((concept != null ? ((Object) concept).hashCode() : 0));
    return result;
  }

  @Override
  public String toString() {
    return concept.getName();
  }
}
