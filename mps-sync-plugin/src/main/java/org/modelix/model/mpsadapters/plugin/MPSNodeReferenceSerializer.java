package org.modelix.model.mpsadapters.plugin;

/*Generated by MPS */

import org.modelix.model.api.INodeReferenceSerializer;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.modelix.model.api.INodeReference;
import org.modelix.model.mpsadapters.mps.SNodeReferenceAdapter;
import jetbrains.mps.smodel.SNodePointer;
import org.modelix.model.mpsadapters.mps.SModelAsNode;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.modelix.model.mpsadapters.mps.SModuleAsNode;
import org.modelix.model.mpsadapters.mps.SRepositoryAsNode;
import java.util.Objects;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.adapter.structure.FormatException;
import org.apache.log4j.Level;

public class MPSNodeReferenceSerializer implements INodeReferenceSerializer {
  private static final Logger LOG = LogManager.getLogger(MPSNodeReferenceSerializer.class);
  private static final String NODE_PREFIX = "mps-node:";
  private static final String MODEL_PREFIX = "mps-model:";
  private static final String MODULE_PREFIX = "mps-module:";
  private static final String SERIALIZED_GLOBAL_REPOSITORY = "mps-repository";

  public static final MPSNodeReferenceSerializer INSTANCE = new MPSNodeReferenceSerializer();

  @Nullable
  @Override
  public String serialize(@NotNull INodeReference ref) {
    if (ref instanceof SNodeReferenceAdapter) {
      return NODE_PREFIX + SNodePointer.serialize(((SNodeReferenceAdapter) ref).getReference());
    } else if (ref instanceof SModelAsNode.NodeReference) {
      return MODEL_PREFIX + PersistenceFacade.getInstance().asString(((SModelAsNode.NodeReference) ref).getModelRef());
    } else if (ref instanceof SModuleAsNode.NodeReference) {
      return MODULE_PREFIX + PersistenceFacade.getInstance().asString(((SModuleAsNode.NodeReference) ref).getModuleRef());
    } else if (ref instanceof SRepositoryAsNode.NodeReference) {
      return SERIALIZED_GLOBAL_REPOSITORY;
    } else {
      return null;
    }
  }

  @Nullable
  @Override
  public INodeReference deserialize(@NotNull String serialized) {
    if (serialized.startsWith(NODE_PREFIX)) {
      return new SNodeReferenceAdapter(PersistenceFacade.getInstance().createNodeReference(serialized.substring(NODE_PREFIX.length())));
    } else if (serialized.startsWith(MODEL_PREFIX)) {
      return new SModelAsNode.NodeReference(PersistenceFacade.getInstance().createModelReference(serialized.substring(MODEL_PREFIX.length())));
    } else if (serialized.startsWith(MODULE_PREFIX)) {
      return new SModuleAsNode.NodeReference(PersistenceFacade.getInstance().createModuleReference(serialized.substring(MODULE_PREFIX.length())));
    } else if (Objects.equals(serialized, SERIALIZED_GLOBAL_REPOSITORY)) {
      return new SRepositoryAsNode(MPSModuleRepository.getInstance()).getReference();
    }

    // legacy deserializer for existing serialized node references without prefix
    try {
      return new SNodeReferenceAdapter(SNodePointer.deserialize(serialized));
    } catch (FormatException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Failed to deserialize " + serialized, ex);
      }
      return null;
    } catch (PersistenceFacade.IncorrectNodeIdFormatException ex) {
      return null;
    } catch (RuntimeException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Failed to deserialize " + serialized, ex);
      }
      return null;
    }
  }

}
