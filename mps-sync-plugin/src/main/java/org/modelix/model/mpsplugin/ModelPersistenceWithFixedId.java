package org.modelix.model.mpsplugin;

/*Generated by MPS */

import jetbrains.mps.persistence.DefaultModelPersistence;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.DataSource;
import org.jetbrains.mps.openapi.model.SModelName;
import org.jetbrains.mps.openapi.persistence.ModelLoadingOption;
import org.jetbrains.mps.openapi.persistence.UnsupportedDataSourceException;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import org.jetbrains.mps.openapi.persistence.StreamDataSource;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.persistence.LazyLoadFacility;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.extapi.model.SModelData;
import java.io.IOException;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;

/**
 * Uses the provided model ID instead of SModelId.generate().
 * Everything else is just copied from DefaultModelPersistence.
 */
public class ModelPersistenceWithFixedId extends DefaultModelPersistence {
  private SModuleReference moduleRef;
  private SModelId modelId;

  public ModelPersistenceWithFixedId(SModuleReference moduleRef, SModelId modelId) {
    this.moduleRef = moduleRef;
    this.modelId = modelId;
  }

  @NotNull
  @Override
  public SModel create(@NotNull DataSource dataSource, @NotNull SModelName modelName, @NotNull ModelLoadingOption... options) throws UnsupportedDataSourceException {
    if (!((supports(dataSource)))) {
      throw new UnsupportedDataSourceException(dataSource);
    }
    final SModelHeader header = SModelHeader.create(ModelPersistence.LAST_VERSION);
    final SModelReference modelReference = PersistenceFacade.getInstance().createModelReference(moduleRef, modelId, modelName.getValue());
    header.setModelReference(modelReference);
    final DefaultSModelDescriptor rv = new DefaultSModelDescriptor(new PersistenceFacility(this, (StreamDataSource) dataSource), header);
    if (dataSource.getTimestamp() != -1) {
      rv.replace(new DefaultSModel(modelReference, header));
    }
    return rv;
  }

  private static class PersistenceFacility extends LazyLoadFacility {
    public PersistenceFacility(DefaultModelPersistence modelFactory, StreamDataSource dataSource) {
      super(modelFactory, dataSource, true);
    }
    @NotNull
    private StreamDataSource getSource0() {
      return (StreamDataSource) super.getSource();
    }
    @NotNull
    @Override
    public SModelHeader readHeader() throws ModelReadException {
      return ModelPersistence.loadDescriptor(getSource0());
    }
    @NotNull
    @Override
    public ModelLoadResult readModel(@NotNull SModelHeader header, @NotNull ModelLoadingState state) throws ModelReadException {
      return ModelPersistence.readModel(header, getSource0(), state);
    }
    @Override
    public boolean doesSaveUpgradePersistence(@NotNull SModelHeader header) {
      // not sure !=-1 is really needed, just left to be ensured about compatibility
      return header.getPersistenceVersion() != ModelPersistence.LAST_VERSION && header.getPersistenceVersion() != -1;
    }
    @Override
    public void saveModel(@NotNull SModelHeader header, SModelData modelData) throws IOException {
      try {
        ModelPersistence.saveModel((jetbrains.mps.smodel.SModel) modelData, getSource0(), header.getPersistenceVersion());
      } catch (ModelSaveException e) {
        throw new RuntimeException(e);
      }
    }
  }

}
