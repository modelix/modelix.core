package org.modelix.model.mpsplugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.Solution;
import org.modelix.model.api.PNodeAdapter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import javax.swing.SwingUtilities;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ModuleCheckout {

  private CloudRepository treeInRepository;
  private MPSProject mpsProject;

  public ModuleCheckout(Project mpsProject, CloudRepository treeInRepository) {
    this.mpsProject = (MPSProject) mpsProject;
    this.treeInRepository = treeInRepository;
  }

  public Solution checkoutCloudModule(PNodeAdapter cloudModule) {
    final ModelCloudExporter modelCloudExporter = new ModelCloudExporter(treeInRepository);
    modelCloudExporter.setCheckoutMode();
    final String exportPath = mpsProject.getProjectFile().getAbsolutePath();
    final Set<Long> moduleIds = SetSequence.fromSetAndArray(new HashSet<Long>(), cloudModule.getNodeId());
    final Wrappers._T<List<Solution>> solutions = new Wrappers._T<List<Solution>>();

    Runnable r = new Runnable() {
      @Override
      public void run() {
        mpsProject.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            solutions.value = modelCloudExporter.export(exportPath, moduleIds, mpsProject);
          }
        });
      }
    };
    if (SwingUtilities.isEventDispatchThread()) {
      r.run();
    } else {
      ApplicationManager.getApplication().invokeAndWait(r, ModalityState.NON_MODAL);
    }
    if (ListSequence.fromList(solutions.value).count() != 1) {
      throw new RuntimeException("One solution expected. These found: " + solutions.value);
    }
    return ListSequence.fromList(solutions.value).getElement(0);
  }
}
