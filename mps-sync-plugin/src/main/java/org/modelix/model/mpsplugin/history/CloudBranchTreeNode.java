package org.modelix.model.mpsplugin.history;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.TextTreeNode;
import org.modelix.model.mpsplugin.ModelServerConnection;
import org.jetbrains.mps.openapi.model.SNode;
import org.modelix.model.mpsplugin.CloudIcons;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.modelix.model.lazy.RepositoryId;
import org.modelix.model.api.IBranch;
import org.modelix.model.area.PArea;
import kotlin.jvm.functions.Function0;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class CloudBranchTreeNode extends TextTreeNode {

  private ModelServerConnection modelServer;
  private SNode branchInfo;

  public CloudBranchTreeNode(ModelServerConnection modelServer, SNode branchInfo) {
    super(CloudIcons.BRANCH_ICON, SPropertyOperations.getString(branchInfo, PROPS.name$MnvL));
    this.modelServer = modelServer;
    this.branchInfo = branchInfo;
    setAllowsChildren(true);
  }

  public SNode getBranchInfo() {
    return this.branchInfo;
  }

  public void updateChildren() {
  }

  @Override
  public void doubleClick() {
    switchBranch();
  }

  public void switchBranch() {
    RepositoryTreeNode treeTreeNode = this.getAncestor(RepositoryTreeNode.class);
    RepositoryId repositoryId = treeTreeNode.getRepositoryId();
    final IBranch infoBranch = modelServer.getInfoBranch();
    String branchName = new PArea(infoBranch).executeRead(new Function0<String>() {
      public String invoke() {
        return SPropertyOperations.getString(getBranchInfo(), PROPS.name$MnvL);
      }
    });
    modelServer.getActiveBranch(repositoryId).switchBranch(branchName);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
