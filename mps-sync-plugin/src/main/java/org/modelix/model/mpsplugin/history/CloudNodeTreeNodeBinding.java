package org.modelix.model.mpsplugin.history;

/*Generated by MPS */

import org.modelix.model.api.PNodeAdapter;
import org.modelix.model.lazy.RepositoryId;
import org.modelix.model.mpsplugin.TransientModuleBinding;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.modelix.model.mpsplugin.CloudRepository;
import org.modelix.model.mpsplugin.ModelServerConnection;

public class CloudNodeTreeNodeBinding {
  public CloudNodeTreeNodeBinding() {
  }
  public static boolean isBoundAsAModule(final CloudNodeTreeNode _this) {
    long nodeId = ((PNodeAdapter) _this.getNode()).getNodeId();
    RepositoryId repositoryId = _this.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    if (_this.getModelServer().hasModuleBinding(repositoryId, nodeId)) {
      return true;
    }
    return false;
  }
  public static TransientModuleBinding getTransientModuleBinding(final CloudNodeTreeNode _this) {
    long nodeId = ((PNodeAdapter) _this.getNode()).getNodeId();
    RepositoryId repositoryId = _this.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    List<TransientModuleBinding> bindings = ListSequence.fromList(_this.getModelServer().getModuleBinding(repositoryId, nodeId)).ofType(TransientModuleBinding.class).toListSequence();
    if (ListSequence.fromList(bindings).count() == 0) {
      return null;
    } else if (ListSequence.fromList(bindings).count() == 1) {
      return ListSequence.fromList(bindings).getElement(0);
    } else {
      throw new IllegalStateException("Multiple transient bindings for the same module are not expected");
    }
  }
  public static CloudRepository getTreeInRepository(final CloudNodeTreeNode _this) {
    ModelServerConnection modelServer = _this.getAncestor(ModelServerTreeNode.class).getModelServer();
    RepositoryId repositoryId = _this.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    CloudRepository treeInRepository = new CloudRepository(modelServer, repositoryId);
    return treeInRepository;
  }
}
