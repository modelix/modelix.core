package org.modelix.model.mpsplugin.history;

/*Generated by MPS */

import javax.swing.tree.TreeNode;
import org.modelix.model.area.PArea;
import kotlin.jvm.functions.Function0;
import kotlin.Unit;
import org.modelix.model.api.INode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.modelix.model.mpsplugin.ModelServerNavigation;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.modelix.model.mpsplugin.CloudRepository;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TreeNodeAccess {
  public TreeNodeAccess() {
  }
  public static String getName(final TreeNode _this) {
    final CloudNodeTreeNode nodeTreeNode = as_ps3aya_a0a0a1(_this, CloudNodeTreeNode.class);
    return new PArea(nodeTreeNode.getBranch()).executeRead(new Function0<String>() {
      public String invoke() {
        return nodeTreeNode.getNode().getPropertyValue(PROPS.name$MnvL.getName());
      }
    });
  }
  public static void delete(final TreeNode _this) {
    final CloudNodeTreeNode nodeTreeNode = as_ps3aya_a0a0a2(_this, CloudNodeTreeNode.class);
    TreeNode parent = nodeTreeNode.getParent();
    new PArea(nodeTreeNode.getBranch()).executeWrite(new Function0<Unit>() {
      public Unit invoke() {
        final INode nodeIN = nodeTreeNode.getNode();
        INode parent = nodeIN.getParent();
        if (parent == null) {
          final Wrappers._boolean found = new Wrappers._boolean(false);
          ListSequence.fromList(ModelServerNavigation.trees(nodeTreeNode.getModelServer())).visitAll(new IVisitor<CloudRepository>() {
            public void visit(CloudRepository tree) {
              if (ListSequence.fromList(tree.repoRoots()).contains(nodeIN)) {
                tree.deleteRoot(nodeIN);
                found.value = true;
              }
            }
          });
          if (found.value) {
            return Unit.INSTANCE;
          }
          if (!(found.value)) {
            throw new RuntimeException("Unable to remove node without parent, not found as root of any tree");
          }
        }
        parent.removeChild(nodeIN);
        return Unit.INSTANCE;
      }
    });

    if (parent == null) {
      throw new RuntimeException("Cannot remove node without parent");
    }
    if (parent instanceof CloudNodeTreeNode) {
      CloudNodeTreeNode parentCNTN = ((CloudNodeTreeNode) parent);
      parentCNTN.remove(nodeTreeNode);
    } else {
      throw new RuntimeException("Unable to remove child from parent " + parent + " (" + parent.getClass() + ")");
    }
  }
  private static <T> T as_ps3aya_a0a0a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_ps3aya_a0a0a2(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
