package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.modelix.model.mpsplugin.history.TreeNodeClassification;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.modelix.model.mpsplugin.history.TreeNodeBinding;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import javax.swing.tree.TreeNode;
import org.modelix.model.mpsplugin.TransientModuleBinding;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.mpsplugin.ModelServerConnection;
import org.modelix.model.mpsplugin.history.ModelServerTreeNode;
import org.modelix.model.lazy.RepositoryId;
import org.modelix.model.mpsplugin.history.RepositoryTreeNode;
import org.modelix.model.api.PNodeAdapter;
import org.modelix.model.mpsplugin.CloudRepository;

public class AddTransientModuleBinding_Action extends BaseAction {
  private static final Icon ICON = null;

  public AddTransientModuleBinding_Action() {
    super("Bind to Transient Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return TreeNodeClassification.isModuleNode(event.getData(MPSCommonDataKeys.TREE_NODE)) && !(TreeNodeBinding.isBoundAsModule(event.getData(MPSCommonDataKeys.TREE_NODE)));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    AddTransientModuleBinding_Action.this.addTransientModuleBinding(event.getData(MPSCommonDataKeys.TREE_NODE), event.getData(CommonDataKeys.PROJECT), event);
  }
  public TransientModuleBinding addTransientModuleBinding(TreeNode treeNode, Project mpsProject, final AnActionEvent event) {
    CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) treeNode;
    ModelServerConnection modelServerConnection = nodeTreeNode.getAncestor(ModelServerTreeNode.class).getModelServer();
    RepositoryId repositoryId = nodeTreeNode.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    TransientModuleBinding transientModuleBinding = new TransientModuleBinding(((PNodeAdapter) nodeTreeNode.getNode()).getNodeId());
    modelServerConnection.addBinding(repositoryId, transientModuleBinding);
    CloudRepository treeInRepository = new CloudRepository(modelServerConnection, repositoryId);
    PersistedBindingConfiguration.getInstance(mpsProject).addTransientBoundModule(treeInRepository, nodeTreeNode);
    return transientModuleBinding;
  }
}
