package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.part.ApplicationPluginPart;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.modelix.common.PropertyOrEnv;
import org.modelix.model.mpsplugin.ModelServerConnections;
import org.modelix.model.lazy.RepositoryId;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.log4j.Level;
import org.modelix.model.mpsplugin.MpsReplicatedRepository;
import org.modelix.model.mpsplugin.CloudTransientModules;
import org.modelix.model.mpsplugin.SharedExecutors;

public class ApplicationPlugin_AppPluginPart extends ApplicationPluginPart {
  private static final Logger LOG = LogManager.getLogger(ApplicationPlugin_AppPluginPart.class);
  private AutoBindings autoBindings;
  public ApplicationPlugin_AppPluginPart() {
  }
  @Override
  public void init() {
    System.out.println("Modelix Application Plugin - Started");
    System.out.flush();
    MetaMetaModelMappings.register();
    try {
      EModelixExecutionMode executionMode = ModelixConfigurationSystemProperties.getExecutionMode();
      System.out.println("Modelix Application Plugin - execution mode: " + executionMode);

      if (executionMode == EModelixExecutionMode.CLUSTER || executionMode == EModelixExecutionMode.PROJECTOR) {
        String modelUri = PropertyOrEnv.get("MODEL_URI");
        if ((modelUri != null && modelUri.length() > 0)) {
          ModelServerConnections.getInstance().addModelServer(modelUri);
        }

        String repositoryId = PropertyOrEnv.get("REPOSITORY_ID");
        Iterable<RepositoryId> fixedRepositoryIds = null;
        boolean bindProjects = executionMode == EModelixExecutionMode.PROJECTOR;
        if ((repositoryId != null && repositoryId.length() > 0)) {
          fixedRepositoryIds = Sequence.<RepositoryId>singleton(new RepositoryId(repositoryId));
        }
        ApplicationPlugin_AppPluginPart.this.autoBindings = new AutoBindings(ModelServerConnections.getInstance(), fixedRepositoryIds, bindProjects);
      }

      switch (executionMode) {
        case CLUSTER:


          break;
        case PROJECTOR:

          break;
        case INTEGRATION_TESTS:

          break;
        case MODEL_EXPORT:
          new ModelImportExport().cloud2mps();
          break;
        case MODEL_IMPORT:
          new ModelImportExport().mps2cloud();
          break;
        case DEFAULT:
          String cloudReposSpecified = PropertyOrEnv.get(ModelixConfigurationSystemProperties.CLOUD_REPOS_SYSPROP);
          if (cloudReposSpecified != null && (cloudReposSpecified != null && cloudReposSpecified.length() > 0)) {
            String[] repos = cloudReposSpecified.split(",");
            for (String repo : repos) {
              ModelServerConnections.getInstance().addModelServer(repo);
            }
          }
          break;
        default:
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Unknown execution mode: " + executionMode);
          }
          break;
      }
    } catch (Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
  }
  @Override
  public void dispose() {
    MetaMetaModelMappings.unregister();
    try {
      MpsReplicatedRepository.disposeAll();
    } catch (Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }

    try {
      if (ApplicationPlugin_AppPluginPart.this.autoBindings != null) {
        ApplicationPlugin_AppPluginPart.this.autoBindings.dispose();
      }
    } catch (Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }

    try {
      ModelServerConnections.getInstance().dispose();
    } catch (Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }

    try {
      CloudTransientModules.getInstance().dispose();
    } catch (Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }

    try {
      SharedExecutors.shutdownAll();
    } catch (Exception ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
  }
}
