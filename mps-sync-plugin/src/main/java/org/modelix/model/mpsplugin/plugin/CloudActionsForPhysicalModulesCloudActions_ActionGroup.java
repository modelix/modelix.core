package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.workbench.action.ApplicationPlugin;
import com.intellij.openapi.actionSystem.AnActionEvent;
import org.modelix.model.mpsplugin.CloudRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.modelix.model.mpsplugin.ModelServerConnections;
import org.jetbrains.annotations.Nullable;

public class CloudActionsForPhysicalModulesCloudActions_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "org.modelix.model.mpsplugin.plugin.CloudActionsForPhysicalModulesCloudActions_ActionGroup";
  private final Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());

  public CloudActionsForPhysicalModulesCloudActions_ActionGroup(@NotNull ApplicationPlugin plugin) {
    super("Cloud Actions", ID, plugin);
    setIsInternal(false);
    setPopup(true);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    for (CloudRepository treeInRepository : Sequence.fromIterable(ModelServerConnections.getInstance().getConnectedTreesInRepositories())) {
      CloudActionsForPhysicalModulesCloudActions_ActionGroup.this.addParameterizedAction(new CopyAndSyncPhysicalModuleOnCloud_Action(treeInRepository), treeInRepository);
      CloudActionsForPhysicalModulesCloudActions_ActionGroup.this.addParameterizedAction(new CopyPhysicalModuleOnCloud_Action(treeInRepository), treeInRepository);
      CloudActionsForPhysicalModulesCloudActions_ActionGroup.this.addParameterizedAction(new ModuleAlreadyOnCloud_Action(treeInRepository), treeInRepository);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
