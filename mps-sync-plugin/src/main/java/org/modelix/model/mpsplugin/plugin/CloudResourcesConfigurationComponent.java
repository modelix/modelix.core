package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import com.intellij.openapi.components.Service;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.RoamingType;
import com.intellij.openapi.components.PersistentStateComponent;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.Objects;

/**
 * This component handles the storage of the cloud configuration.
 * For information about component persistence refer to https://jetbrains.org/intellij/sdk/docs/basics/persisting_state_of_components.html
 */
@Service
@com.intellij.openapi.components.State(name = "CloudResources", storages = @Storage(file = "cloudResources.xml", value = "cloudResources.xml", roamingType = RoamingType.DISABLED)
, reloadable = true)
public final class CloudResourcesConfigurationComponent implements PersistentStateComponent<CloudResourcesConfigurationComponent.State> {

  /*package*/ static class State {
    @NotNull
    public Set<String> modelServers;
    @NotNull
    public Set<String> transientProjects;
    @NotNull
    public Set<String> transientModules;
    @NotNull
    public Set<String> mappedModules;

    /*package*/ State() {
      modelServers = new LinkedHashSet<String>();
      transientModules = new LinkedHashSet<String>();
      transientProjects = new LinkedHashSet<String>();
      mappedModules = new LinkedHashSet<String>();
    }

    @Override
    public int hashCode() {
      int hc = 1;
      hc += 3 * modelServers.hashCode();
      hc += 7 * transientProjects.hashCode();
      hc += 11 * transientModules.hashCode();
      hc += 13 * mappedModules.hashCode();
      return hc;
    }
    @Override
    public boolean equals(Object obj) {
      if (obj instanceof State) {
        State other = ((State) obj);
        if (!(Objects.equals(transientProjects, other.transientProjects))) {
          return false;
        }
        if (!(Objects.equals(modelServers, other.modelServers))) {
          return false;
        }
        if (!(Objects.equals(transientModules, other.transientModules))) {
          return false;
        }
        if (!(Objects.equals(mappedModules, other.mappedModules))) {
          return false;
        }
        return true;
      } else {
        return false;
      }
    }
    @Override
    public String toString() {
      return "State(cloudRepositories: " + modelServers + ", transientProjects: " + transientProjects + ", transientModules: " + transientModules + ", mappedModules: " + mappedModules + ")";
    }
  }
  public CloudResourcesConfigurationComponent() {
  }
  @NotNull
  private State state = new State();

  @Override
  @NotNull
  public State getState() {
    return state;
  }
  @Override
  public void loadState(@NotNull State state) {
    this.state = state;
  }
}
