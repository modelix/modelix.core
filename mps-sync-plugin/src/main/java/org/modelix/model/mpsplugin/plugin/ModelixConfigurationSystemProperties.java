package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.modelix.common.PropertyOrEnv;
import java.util.Objects;
import org.apache.log4j.Level;

public class ModelixConfigurationSystemProperties {
  private static final Logger LOG = LogManager.getLogger(ModelixConfigurationSystemProperties.class);
  public static String EXECUTION_MODE_SYSPROP = "modelix.executionMode";
  public static String LOAD_PERSISTENT_BINDIND_SYSPROP = "modelix.loadPersistentBinding";
  public static String EXPORT_PATH_SYSPROP = ModelixExportConfiguration.PATH;
  public static String IMPORT_PATH_SYSPROP = "modelix.import.path";
  public static String CLOUD_REPOS_SYSPROP = "modelix.cloud.repos";

  public static boolean shouldLoadPersistentBinding() {
    String flagString = PropertyOrEnv.get(LOAD_PERSISTENT_BINDIND_SYSPROP);
    if (flagString == null || flagString.isEmpty()) {
      return true;
    }
    return Boolean.valueOf(flagString);
  }

  public static EModelixExecutionMode getExecutionMode() {
    String executionModeString = PropertyOrEnv.get(EXECUTION_MODE_SYSPROP);
    EModelixExecutionMode executionMode = EModelixExecutionMode.DEFAULT;
    if ((executionModeString == null || executionModeString.length() == 0)) {
      String value = PropertyOrEnv.get("disable.autobinding");
      if (value != null && (Objects.equals(value.toLowerCase(), "true"))) {
        executionMode = EModelixExecutionMode.INTEGRATION_TESTS;
      }

      if (isNotEmptyString(PropertyOrEnv.get(EXPORT_PATH_SYSPROP))) {
        executionMode = EModelixExecutionMode.MODEL_EXPORT;
      }
    } else {
      try {
        executionMode = EModelixExecutionMode.valueOf(executionModeString);
      } catch (IllegalArgumentException ex) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Unknown execution mode: " + executionModeString, ex);
        }
      }
    }
    System.setProperty(EXECUTION_MODE_SYSPROP, executionMode.name());
    return executionMode;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
