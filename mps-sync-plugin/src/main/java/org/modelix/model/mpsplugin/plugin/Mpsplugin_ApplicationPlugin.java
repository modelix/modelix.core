package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.applicationplugins.BaseApplicationPlugin;
import com.intellij.openapi.extensions.PluginId;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.ProjectActions_ActionGroup;
import jetbrains.mps.ide.actions.SolutionActions_ActionGroup;
import java.util.List;
import jetbrains.mps.plugins.part.ApplicationPluginPart;

public class Mpsplugin_ApplicationPlugin extends BaseApplicationPlugin {
  private final PluginId myId = PluginId.getId("org.modelix.model.mpsplugin");

  public Mpsplugin_ApplicationPlugin() {
  }

  @NotNull
  public PluginId getId() {
    return myId;
  }

  public void createGroups() {
    // actions w/o parameters
    addAction(new AddBranch_Action());
    addAction(new AddModelNode_Action());
    addAction(new AddModelServer_Action());
    addAction(new AddModuleNode_Action());
    addAction(new AddProjectBinding_Action());
    addAction(new AddProjectNode_Action());
    addAction(new AddRepository_Action());
    addAction(new AddTransientModuleBinding_Action());
    addAction(new CheckoutAndSyncModule_Action());
    addAction(new CheckoutModule_Action());
    addAction(new DeleteModule_Action());
    addAction(new DeleteProject_Action());
    addAction(new GetCloudRepositorySize_Action());
    addAction(new LoadHistoryForBranch_Action());
    addAction(new LoadHistoryForRepository_Action());
    addAction(new NavigateToMpsNode_Action());
    addAction(new Reconnect_Action());
    addAction(new RemoveModelServer_Action());
    addAction(new RemoveRepository_Action());
    addAction(new RemoveTransientModuleBinding_Action());
    addAction(new ShowAuthenticationInfo_Action());
    addAction(new ShowProperties_Action());
    addAction(new ShowReferences_Action());
    addAction(new StoreAllModules_Action());
    addAction(new SwitchBranch_Action());
    addAction(new Unbind_Action());
    // groups
    addGroup(new CloudActionsForPhysicalModulesCloudActions_ActionGroup(this));
    addGroup(new CloudActionsForPhysicalModules_ActionGroup(this));
    addGroup(new CloudActionsForPhysicalProjectsCloudActions_ActionGroup(this));
    addGroup(new CloudActionsForPhysicalProjects_ActionGroup(this));
    addGroup(new CloudBindingGroup_ActionGroup(this));
    addGroup(new CloudBranchGroup_ActionGroup(this));
    addGroup(new CloudNodeGroupAddChild_ActionGroup(this));
    addGroup(new CloudNodeGroupSetProperty_ActionGroup(this));
    addGroup(new CloudNodeGroup_ActionGroup(this));
    addGroup(new CloudRootGroup_ActionGroup(this));
    addGroup(new ModelServerGroup_ActionGroup(this));
    addGroup(new RepositoryGroup_ActionGroup(this));
  }
  public void adjustRegularGroups() {
    insertGroupIntoAnother(CloudActionsForPhysicalProjects_ActionGroup.ID, ProjectActions_ActionGroup.ID, ProjectActions_ActionGroup.LABEL_ID_projectNew);
    insertGroupIntoAnother(CloudActionsForPhysicalModules_ActionGroup.ID, SolutionActions_ActionGroup.ID, SolutionActions_ActionGroup.LABEL_ID_contents);
  }
  @Override
  public void fillCustomParts(List<ApplicationPluginPart> parts) {
    parts.add(new ApplicationPlugin_AppPluginPart());
  }
}
