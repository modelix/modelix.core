package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.modelix.model.mpsplugin.history.TreeNodeClassification;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.mpsplugin.CloudRepository;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNodeBinding;
import kotlin.jvm.functions.Function0;
import org.modelix.model.mpsplugin.MPSNodeMapping;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import javax.swing.tree.TreeNode;
import org.modelix.model.api.INode;
import org.modelix.model.mpsplugin.INodeUtils;
import com.intellij.openapi.ui.Messages;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Objects;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class NavigateToMpsNode_Action extends BaseAction {
  private static final Icon ICON = null;

  public NavigateToMpsNode_Action() {
    super("Navigate to Corresponding MPS Node", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(TreeNodeClassification.isProperNode(event.getData(MPSCommonDataKeys.TREE_NODE)))) {
      return false;
    }
    final CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) event.getData(MPSCommonDataKeys.TREE_NODE);
    CloudRepository treeInRepository = CloudNodeTreeNodeBinding.getTreeInRepository(nodeTreeNode);
    return treeInRepository.computeRead(new Function0<Boolean>() {
      public Boolean invoke() {
        return MPSNodeMapping.isMappedToMpsNode(nodeTreeNode.getNode());
      }
    });
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) event.getData(MPSCommonDataKeys.TREE_NODE);
    final CloudRepository treeInRepository = CloudNodeTreeNodeBinding.getTreeInRepository(nodeTreeNode);
    // I need to know in which module to look for this node

    treeInRepository.runRead(new Runnable() {
      public void run() {
        final String mpsNodeId = treeInRepository.computeRead(new Function0<String>() {
          public String invoke() {
            return MPSNodeMapping.mappedMpsNodeID(nodeTreeNode.getNode());
          }
        });
        INode cloudModule = INodeUtils.containingModule(nodeTreeNode.getNode());
        if (cloudModule == null) {
          Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No containing module found", "Error navigating to MPS node");
          return;
        }
        INode cloudModel = INodeUtils.containingModel(nodeTreeNode.getNode());
        if (cloudModel == null) {
          Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No containing model found", "Error navigating to MPS node");
          return;
        }
        final String moduleId = cloudModule.getPropertyValue(PROPS.id$7MjP.getName());
        if (moduleId == null) {
          Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No module id", "Error navigating to MPS node");
          return;
        }
        final String modelId = cloudModel.getPropertyValue(PROPS.id$lDUo.getName());
        if (modelId == null) {
          Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No model id", "Error navigating to MPS node");
          return;
        }
        final SRepository repo = ProjectHelper.toMPSProject(event.getData(CommonDataKeys.PROJECT)).getRepository();
        repo.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            for (SModule module : Sequence.fromIterable(repo.getModules())) {
              if (Objects.equals(module.getModuleId().toString(), moduleId)) {
                for (SModel model : Sequence.fromIterable(module.getModels())) {
                  if (Objects.equals(model.getModelId().toString(), modelId)) {
                    SNode node = NavigateToMpsNode_Action.this.findNodeInModel(model, mpsNodeId, event);
                    if (node == null) {
                      Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No node found: " + mpsNodeId, "Error navigating to MPS node");
                      return;
                    } else {
                      NavigationSupport.getInstance().openNode(ProjectHelper.toMPSProject(event.getData(CommonDataKeys.PROJECT)), node, false, true);
                      return;
                    }
                  }
                }
                Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No model found: " + modelId, "Error navigating to MPS node");
                return;
              }
            }
            Messages.showErrorDialog(event.getData(CommonDataKeys.PROJECT), "No module found: " + moduleId, "Error navigating to MPS node");
          }
        });
      }
    });
  }
  /*package*/ SNode findNodeInModel(SModel model, String nodeId, final AnActionEvent event) {
    for (SNode root : Sequence.fromIterable(model.getRootNodes())) {
      SNode res = NavigateToMpsNode_Action.this.findNodeInNode(root, nodeId, event);
      if (res != null) {
        return res;
      }
    }
    return null;
  }
  /*package*/ SNode findNodeInNode(SNode node, String nodeId, final AnActionEvent event) {
    if (Objects.equals(node.getNodeId().toString(), nodeId)) {
      return node;
    }
    for (SNode child : Sequence.fromIterable(node.getChildren())) {
      SNode res = NavigateToMpsNode_Action.this.findNodeInNode(child, nodeId, event);
      if (res != null) {
        return res;
      }
    }
    return null;
  }

  private static final class PROPS {
    /*package*/ static final SProperty id$7MjP = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, 0x3aa34013f2a802e0L, "id");
    /*package*/ static final SProperty id$lDUo = MetaAdapterFactory.getProperty(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50cL, 0x244b85440ee67212L, "id");
  }
}
