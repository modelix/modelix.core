package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Map;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.concurrent.ConcurrentMap;
import de.slisson.mps.reflection.runtime.ReflectionUtil;
import com.intellij.serviceContainer.ComponentManagerImpl;
import java.util.function.Consumer;
import org.modelix.model.mpsplugin.ModelServerConnection;
import java.util.function.Predicate;
import java.util.Objects;
import org.modelix.model.mpsplugin.CloudRepository;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.mpsplugin.ModuleBinding;
import org.modelix.model.mpsplugin.TransientModuleBinding;
import org.modelix.model.mpsplugin.ProjectModuleBinding;
import org.modelix.model.api.IBranch;
import org.modelix.model.api.INode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import kotlin.Unit;
import org.modelix.model.area.PArea;
import kotlin.jvm.functions.Function0;
import org.modelix.model.api.PNodeAdapter;
import org.jetbrains.mps.openapi.model.SNode;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.modelix.model.mpsplugin.ModelServerConnections;
import java.util.Set;
import org.modelix.model.mpsplugin.SharedExecutors;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.module.SModule;
import com.intellij.openapi.ui.Messages;
import org.modelix.model.mpsplugin.INodeUtils;
import org.modelix.model.mpsplugin.SyncDirection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class PersistedBindingConfiguration {
  private static final Logger LOG = LogManager.getLogger(PersistedBindingConfiguration.class);

  private static Map<Project, PersistedBindingConfiguration> instances = MapSequence.fromMap(new HashMap<Project, PersistedBindingConfiguration>());

  public static PersistedBindingConfiguration getInstance(Project project) {
    if (!(MapSequence.fromMap(instances).containsKey(project))) {
      MapSequence.fromMap(instances).put(project, new PersistedBindingConfiguration(project));
    }
    return MapSequence.fromMap(instances).get(project);
  }

  public static PersistedBindingConfiguration getInstance(jetbrains.mps.project.Project project) {
    return getInstance(ProjectHelper.toIdeaProject(project));
  }

  public static void disposeInstance(Project project) {
    PersistedBindingConfiguration instance = MapSequence.fromMap(instances).removeKey(project);
    if (instance != null) {
      instance.dispose();
    }
  }

  private Project project;

  private PersistedBindingConfiguration(Project project) {
    this.project = project;
  }

  public void dispose() {
    ConcurrentMap<Class<?>, Object> lightServices = ((ConcurrentMap<Class<?>, Object>) ReflectionUtil.readField(ComponentManagerImpl.class, ((ComponentManagerImpl) project), "lightServices"));
    lightServices.remove(CloudResourcesConfigurationComponent.class);

  }

  public String describeState() {
    return readState().toString();
  }

  public void applyToProject() {
    addModelServersAsSpecifiedInPersistedBindingConfiguration();
    bindTransientModulesAsSpecifiedInPersistedConfiguration();
    bindMappedModulesAsSpecifiedInPersistedConfiguration();
  }

  public boolean isEmpty() {
    CloudResourcesConfigurationComponent.State state = readState();
    if (!(state.modelServers.isEmpty())) {
      return false;
    }
    if (!(state.mappedModules.isEmpty())) {
      return false;
    }
    if (!(state.transientModules.isEmpty())) {
      return false;
    }
    if (!(state.transientProjects.isEmpty())) {
      return false;
    }
    return true;
  }

  public boolean hasMappedModule(String moduleName) {
    CloudResourcesConfigurationComponent.State state = readState();
    for (String mm : state.mappedModules) {
      if (mm.endsWith("#" + moduleName)) {
        return true;
      }
    }
    return false;
  }

  public void clear() {
    modifyState(new Consumer<CloudResourcesConfigurationComponent.State>() {
      public void accept(CloudResourcesConfigurationComponent.State state) {
        state.modelServers.clear();
        state.mappedModules.clear();
        state.transientModules.clear();
        state.transientProjects.clear();
      }
    });
    assert isEmpty();
  }

  private CloudResourcesConfigurationComponent.State readState() {
    CloudResourcesConfigurationComponent cloudResourcesConfigurationComponent = project.getService(CloudResourcesConfigurationComponent.class);
    CloudResourcesConfigurationComponent.State state = cloudResourcesConfigurationComponent.getState();
    return state;
  }

  private void modifyState(Consumer<CloudResourcesConfigurationComponent.State> modifier) {
    CloudResourcesConfigurationComponent cloudResourcesConfigurationComponent = project.getService(CloudResourcesConfigurationComponent.class);
    CloudResourcesConfigurationComponent.State state = readState();
    modifier.accept(state);
    cloudResourcesConfigurationComponent.loadState(state);
  }

  public void addModelServer(final ModelServerConnection modelServer) {
    modifyState(new Consumer<CloudResourcesConfigurationComponent.State>() {
      public void accept(CloudResourcesConfigurationComponent.State state) {
        state.modelServers.add(modelServer.getBaseUrl());
      }
    });
  }

  public boolean isModelServerPresent(String url) {
    return readState().modelServers.contains(url);
  }

  public void ensureModelServerIsPresent(final ModelServerConnection modelServer) {
    if (!(isModelServerPresent(modelServer.getBaseUrl()))) {
      modifyState(new Consumer<CloudResourcesConfigurationComponent.State>() {
        public void accept(CloudResourcesConfigurationComponent.State state) {
          state.modelServers.add(modelServer.getBaseUrl());
        }
      });
    }
  }


  public void removeModelServer(final ModelServerConnection modelServer) {
    modifyState(new Consumer<CloudResourcesConfigurationComponent.State>() {
      public void accept(CloudResourcesConfigurationComponent.State state) {
        state.modelServers.removeIf(new Predicate<String>() {
          public boolean test(String url) {
            return Objects.equals(url, modelServer.getBaseUrl());
          }
        });
        state.transientModules.removeIf(new Predicate<String>() {
          public boolean test(String moduleStr) {
            return moduleStr.startsWith(modelServer.getBaseUrl() + "#");
          }
        });
      }
    });
  }

  public void addTransientBoundModule(CloudRepository repositoryInModelServer, CloudNodeTreeNode nodeTreeNode) {
    addTransientBoundModule(repositoryInModelServer, nodeTreeNode.getBranch(), nodeTreeNode.getNode());
  }

  public void removeTransientBoundModule(CloudRepository repositoryInModelServer, CloudNodeTreeNode nodeTreeNode) {
    removeTransientBoundModule(repositoryInModelServer, nodeTreeNode.getBranch(), nodeTreeNode.getNode());
  }

  public void removeBoundModule(CloudRepository repositoryInModelServer, ModuleBinding moduleBinding) {
    if (moduleBinding instanceof TransientModuleBinding) {
      TransientModuleBinding transientModuleBinding = ((TransientModuleBinding) moduleBinding);
      removeMappedBoundModule(repositoryInModelServer, transientModuleBinding.getModuleNodeId());
    } else if (moduleBinding instanceof ProjectModuleBinding) {
      ProjectModuleBinding mappedModuleBinding = ((ProjectModuleBinding) moduleBinding);
      removeMappedModule(repositoryInModelServer, mappedModuleBinding);
    } else {
      throw new UnsupportedOperationException("Unsupported ModuleBinding " + moduleBinding.getClass());
    }
  }

  public void removeMappedModule(CloudRepository repositoryInModelServer, ProjectModuleBinding binding) {
    removeMappedBoundModule(repositoryInModelServer, binding.getModuleNodeId());
  }

  public void addTransientBoundModule(final CloudRepository repositoryInModelServer, final IBranch branch, final INode cloudNode) {
    modifyState(new _Adapters._return_P1_E0_to_Consumer_adapter<CloudResourcesConfigurationComponent.State>(new _FunctionTypes._return_P1_E0<Unit, CloudResourcesConfigurationComponent.State>() {
      public Unit invoke(final CloudResourcesConfigurationComponent.State state) {
        return new PArea(branch).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            String moduleName = ((PNodeAdapter) cloudNode).getPropertyValue("name");
            state.transientModules.add(repositoryInModelServer.completeId() + "#" + moduleName);
            return Unit.INSTANCE;
          }
        });
      }
    }));
  }

  public void removeTransientBoundModule(final CloudRepository repositoryInModelServer, final IBranch branch, final INode cloudNode) {
    modifyState(new _Adapters._return_P1_E0_to_Consumer_adapter<CloudResourcesConfigurationComponent.State>(new _FunctionTypes._return_P1_E0<Unit, CloudResourcesConfigurationComponent.State>() {
      public Unit invoke(final CloudResourcesConfigurationComponent.State state) {
        return new PArea(branch).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            String moduleName = ((PNodeAdapter) cloudNode).getPropertyValue("name");
            String transientModuleDesc = repositoryInModelServer.completeId() + "#" + moduleName;
            state.transientModules.remove(transientModuleDesc);
            return Unit.INSTANCE;
          }
        });
      }
    }));
  }

  public void removeTransientBoundModule(final CloudRepository repositoryInModelServer, final IBranch branch, final long nodeId) {
    modifyState(new _Adapters._return_P1_E0_to_Consumer_adapter<CloudResourcesConfigurationComponent.State>(new _FunctionTypes._return_P1_E0<Unit, CloudResourcesConfigurationComponent.State>() {
      public Unit invoke(final CloudResourcesConfigurationComponent.State state) {
        return new PArea(branch).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            String moduleName = branch.getReadTransaction().getProperty(nodeId, "name");
            String transientModuleDesc = repositoryInModelServer.completeId() + "#" + moduleName;
            state.transientModules.remove(transientModuleDesc);
            return Unit.INSTANCE;
          }
        });
      }
    }));
  }

  public void removeMappedBoundModule(final CloudRepository repositoryInModelServer, final long nodeId) {
    final IBranch branch = repositoryInModelServer.getActiveBranch().getBranch();
    modifyState(new _Adapters._return_P1_E0_to_Consumer_adapter<CloudResourcesConfigurationComponent.State>(new _FunctionTypes._return_P1_E0<Unit, CloudResourcesConfigurationComponent.State>() {
      public Unit invoke(final CloudResourcesConfigurationComponent.State state) {
        return new PArea(branch).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            String moduleName = branch.getReadTransaction().getProperty(nodeId, "name");
            String moduleDesc = repositoryInModelServer.completeId() + "#" + moduleName;
            state.mappedModules.remove(moduleDesc);
            return Unit.INSTANCE;
          }
        });
      }
    }));
  }

  public void addTransientBoundModule(CloudRepository repositoryInModelServer, IBranch branch, long cloudNodeId) {
    addTransientBoundModule(repositoryInModelServer, branch, new PNodeAdapter(cloudNodeId, branch));
  }

  public void addTransientBoundProject(final CloudRepository repositoryInModelServer, SNode cloudProject) {
    modifyState(new Consumer<CloudResourcesConfigurationComponent.State>() {
      public void accept(final CloudResourcesConfigurationComponent.State state) {
        repositoryInModelServer.runRead(new Runnable() {
          public void run() {
            state.transientProjects.add(repositoryInModelServer.completeId());
          }
        });
      }
    });
  }

  public void addTransientBoundModule(final CloudRepository repositoryInModelServer, final PNodeAdapter nodeTreeNode) {
    modifyState(new _Adapters._return_P1_E0_to_Consumer_adapter<CloudResourcesConfigurationComponent.State>(new _FunctionTypes._return_P1_E0<Unit, CloudResourcesConfigurationComponent.State>() {
      public Unit invoke(final CloudResourcesConfigurationComponent.State state) {
        return new PArea(nodeTreeNode.getBranch()).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            String moduleName = ((PNodeAdapter) nodeTreeNode).getPropertyValue("name");
            state.transientModules.add(repositoryInModelServer.completeId() + "#" + moduleName);
            return Unit.INSTANCE;
          }
        });
      }
    }));
  }

  public void addMappedBoundModule(final CloudRepository repositoryInModelServer, final PNodeAdapter nodeTreeNode) {
    if (repositoryInModelServer == null) {
      throw new IllegalArgumentException("treeInRepository should not be null");
    }
    modifyState(new _Adapters._return_P1_E0_to_Consumer_adapter<CloudResourcesConfigurationComponent.State>(new _FunctionTypes._return_P1_E0<Unit, CloudResourcesConfigurationComponent.State>() {
      public Unit invoke(final CloudResourcesConfigurationComponent.State state) {
        return new PArea(nodeTreeNode.getBranch()).executeRead(new Function0<Unit>() {
          public Unit invoke() {
            String moduleName = ((PNodeAdapter) nodeTreeNode).getPropertyValue(PROPS.name$MnvL.getName());
            if (moduleName == null) {
              throw new IllegalStateException("module should not have null name");
            }
            state.mappedModules.add(repositoryInModelServer.completeId() + "#" + moduleName);
            return Unit.INSTANCE;
          }
        });
      }
    }));
  }

  private void addModelServersAsSpecifiedInPersistedBindingConfiguration() {
    CloudResourcesConfigurationComponent.State state = readState();
    for (String repoUrl : state.modelServers) {
      System.out.println("addModelServersAsSpecifiedInPersistedBindingConfiguration " + repoUrl);
      ModelServerConnection cloudRepository = ensureModelServerIsPresent(repoUrl);
    }
  }

  private void bindTransientModulesAsSpecifiedInPersistedConfiguration() {
    CloudResourcesConfigurationComponent.State state = readState();
    for (String moduleStr : state.transientModules) {
      final String[] parts = moduleStr.split("#");
      if (parts.length != 2) {
        if (LOG.isEnabledFor(Level.FATAL)) {
          LOG.fatal("The configuration of Modelix is not correct, please check .mps/cloudResources.xml. Module entry: " + moduleStr, new RuntimeException());
        }
        continue;
      }
      final CloudRepository repositoryInModelServer = CloudRepository.fromPresentationString(parts[0]);
      ModelServerConnection modelServer = ensureModelServerIsPresent(repositoryInModelServer.getModelServer().getBaseUrl());

      withConnectedCloudRepo(modelServer, new Consumer<ModelServerConnection>() {
        public void accept(ModelServerConnection msc) {
          bindToTransientModules(repositoryInModelServer, SetSequence.fromSetAndArray(new HashSet<String>(), parts[1]));
        }
      });
    }
  }

  private void bindMappedModulesAsSpecifiedInPersistedConfiguration() {
    CloudResourcesConfigurationComponent.State state = readState();
    for (String moduleStr : state.mappedModules) {
      final String[] parts = moduleStr.split("#");
      if (parts.length != 2) {
        if (LOG.isEnabledFor(Level.FATAL)) {
          LOG.fatal("The configuration of Modelix is not correct, please check .mps/cloudResources.xml. Module entry: " + moduleStr, new RuntimeException());
        }
        continue;
      }
      final CloudRepository repositoryInModelServer = CloudRepository.fromPresentationString(parts[0]);
      ModelServerConnection modelServer = ensureModelServerIsPresent(repositoryInModelServer.getModelServer().getBaseUrl());

      withConnectedCloudRepo(modelServer, new Consumer<ModelServerConnection>() {
        public void accept(ModelServerConnection msc) {
          bindToMappedModules(repositoryInModelServer, SetSequence.fromSetAndArray(new HashSet<String>(), parts[1]));
        }
      });
    }
  }


  private static ModelServerConnection ensureModelServerIsPresent(String url) {
    return ModelServerConnections.getInstance().ensureModelServerIsPresent(url);
  }

  private static void withConnectedCloudRepoHelper(final ModelServerConnection modelServer, final Consumer<ModelServerConnection> consumer, final int nAttempts) {
    if (modelServer.isConnected()) {
      consumer.accept(modelServer);
    } else {
      if (nAttempts <= 0) {
        LOG.error("Unable to connect to Modelix server. Modelix configuration aborted", null);
        return;
      }
      modelServer.reconnect();
      new Thread(new Runnable() {
        public void run() {
          try {
            Thread.sleep(250);
          } catch (InterruptedException e) {
          }
          withConnectedCloudRepoHelper(modelServer, consumer, nAttempts - 1);
        }
      }).start();
    }
  }

  /**
   * Sometimes we need to wait for the repository to be connected. This is the case for example on starting the plugin.
   */
  private static void withConnectedCloudRepo(final ModelServerConnection modelServer, final Consumer<ModelServerConnection> consumer) {
    PersistedBindingConfiguration.withConnectedCloudRepoHelper(modelServer, consumer, 20);
  }

  /**
   * FIXME we should probably not identify modules by name but some unique identifier instead
   *
   * @param repositoryInModelServer
   * @param modulesToBind
   */
  private static void bindToTransientModules(final CloudRepository repositoryInModelServer, final Set<String> modulesToBind) {
    SharedExecutors.FIXED.execute(new Runnable() {
      public void run() {
        repositoryInModelServer.runRead(new Consumer<PNodeAdapter>() {
          public void accept(PNodeAdapter rootNode) {
            for (INode child : Sequence.fromIterable(rootNode.getAllChildren())) {
              String name = child.getPropertyValue("name");
              if (SetSequence.fromSet(modulesToBind).contains(name)) {
                repositoryInModelServer.addTransientModuleBinding(child);
              }
            }
          }
        });
      }
    });
  }

  /**
   * FIXME we should probably not identify modules by name but some unique identifier instead
   *
   * @param repositoryInModelServer
   * @param modulesToBind
   */
  private void bindToMappedModules(final CloudRepository repositoryInModelServer, final Set<String> modulesToBind) {
    SharedExecutors.FIXED.execute(new Runnable() {
      public void run() {
        repositoryInModelServer.runRead(new Consumer<PNodeAdapter>() {
          public void accept(PNodeAdapter rootNode) {
            for (INode child : Sequence.fromIterable(rootNode.getAllChildren())) {
              String name = child.getPropertyValue("name");
              if (SetSequence.fromSet(modulesToBind).contains(name)) {
                SModule physicalModule = findPhysicalModule(name);
                if (physicalModule == null) {
                  Messages.showErrorDialog(project, "We cannot instantiate the mapped binding to " + name + " because the module is missing", "Error on mapped binding");
                } else {
                  repositoryInModelServer.addBinding(new ProjectModuleBinding(INodeUtils.nodeIdAsLong(child), physicalModule, SyncDirection.TO_MPS));
                }
              }
            }
          }
        });
      }
    });
  }

  private SModule findPhysicalModule(String moduleName) {
    for (SModule physicalModule : ListSequence.fromList(ProjectHelper.toMPSProject(project).getProjectModules())) {
      if (Objects.equals(physicalModule.getModuleName(), moduleName)) {
        return physicalModule;
      }
    }
    return null;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
