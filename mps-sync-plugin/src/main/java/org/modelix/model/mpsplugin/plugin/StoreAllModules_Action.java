package org.modelix.model.mpsplugin.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.modelix.model.mpsplugin.history.TreeNodeClassification;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import javax.swing.tree.TreeNode;
import org.modelix.model.mpsplugin.history.CloudNodeTreeNode;
import org.modelix.model.mpsplugin.ModelServerConnection;
import org.modelix.model.mpsplugin.history.ModelServerTreeNode;
import org.modelix.model.lazy.RepositoryId;
import org.modelix.model.mpsplugin.history.RepositoryTreeNode;
import org.modelix.model.mpsplugin.CloudRepository;
import org.modelix.model.api.PNodeAdapter;
import org.modelix.model.api.IBranch;
import com.intellij.openapi.progress.Task;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Set;
import kotlin.jvm.functions.Function0;
import jetbrains.mps.internal.collections.runtime.ISetSequence;
import org.modelix.model.api.ITransaction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Collections;
import kotlin.Unit;
import org.modelix.model.api.IWriteTransaction;
import org.modelix.model.mpsadapters.mps.SConceptAdapter;
import org.modelix.model.mpsplugin.ModelCloudImportUtils;
import com.intellij.openapi.progress.ProgressManager;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class StoreAllModules_Action extends BaseAction {
  private static final Icon ICON = null;

  public StoreAllModules_Action() {
    super("Store Entire MPS Module Repository", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return TreeNodeClassification.isProjectNode(event.getData(MPSCommonDataKeys.TREE_NODE));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    CloudNodeTreeNode nodeTreeNode = (CloudNodeTreeNode) event.getData(MPSCommonDataKeys.TREE_NODE);
    final ModelServerConnection modelServer = nodeTreeNode.getAncestor(ModelServerTreeNode.class).getModelServer();
    RepositoryId repositoryId = nodeTreeNode.getAncestor(RepositoryTreeNode.class).getRepositoryId();
    final CloudRepository treeInRepository = new CloudRepository(modelServer, repositoryId);
    final long cloudProjectId = ((PNodeAdapter) nodeTreeNode.getNode()).getNodeId();
    final IBranch branch = treeInRepository.getActiveBranch().getBranch();

    Task.Backgroundable task = new Task.Backgroundable(ProjectHelper.toIdeaProject(event.getData(MPSCommonDataKeys.MPS_PROJECT)), "Import MPS Repository", true) {
      @Override
      public void run(@NotNull ProgressIndicator indicator) {
        final ProgressMonitorAdapter progress = new ProgressMonitorAdapter(indicator);

        final MPSModuleRepository mpsRepo = MPSModuleRepository.getInstance();
        final Wrappers._T<List<SModule>> mpsModules = new Wrappers._T<List<SModule>>(null);
        mpsRepo.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            mpsModules.value = ListSequence.fromListWithValues(new ArrayList<SModule>(), mpsRepo.getModules());
          }
        });

        final Set<String> existingModules = branch.computeRead(new Function0<ISetSequence<String>>() {
          public ISetSequence<String> invoke() {
            final ITransaction t = branch.getTransaction();
            Iterable<Long> existingModules = t.getChildren(cloudProjectId, LINKS.modules$Bi3g.getName());
            return SetSequence.fromSetWithValues(new HashSet<String>(), Sequence.fromIterable(existingModules).select(new ISelector<Long, String>() {
              public String select(Long it) {
                return t.getProperty(it, PROPS.name$MnvL.getName());
              }
            }));
          }
        });
        mpsModules.value = ListSequence.fromList(mpsModules.value).where(new IWhereFilter<SModule>() {
          public boolean accept(SModule it) {
            return !(SetSequence.fromSet(existingModules).contains(it.getModuleName()));
          }
        }).toListSequence();

        Collections.shuffle(mpsModules.value);
        progress.start("Importing " + ListSequence.fromList(mpsModules.value).count() + " Modules", ListSequence.fromList(mpsModules.value).count());
        for (final SModule mpsModule : ListSequence.fromList(mpsModules.value)) {
          if (progress.isCanceled()) {
            break;
          }
          while (modelServer.getClient().getStoreCache().getKeyValueStore().getPendingSize() > 10000) {
            if (progress.isCanceled()) {
              break;
            }
            try {
              Thread.sleep(1000);
            } catch (InterruptedException e) {
              break;
            }
          }
          progress.step("Importing Module " + mpsModule.getModuleName());
          branch.runWrite(new Function0<Unit>() {
            public Unit invoke() {
              IWriteTransaction t = branch.getWriteTransaction();
              long cloudModuleId = t.addNewChild(cloudProjectId, LINKS.modules$Bi3g.getName(), -1, SConceptAdapter.wrap(CONCEPTS.Module$4i));
              t.setProperty(cloudModuleId, PROPS.name$MnvL.getName(), mpsModule.getModuleName());
              ModelCloudImportUtils.replicatePhysicalModule(treeInRepository, new PNodeAdapter(cloudModuleId, branch), mpsModule, null, progress.subTask(1));
              return Unit.INSTANCE;
            }
          });
        }
      }
    };

    ProgressManager.getInstance().run(task);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink modules$Bi3g = MetaAdapterFactory.getContainmentLink(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x37a0917d689de959L, 0x37a0917d689de9e2L, "modules");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Module$4i = MetaAdapterFactory.getConcept(0xa7577d1d4e5431dL, 0x98b1fae38f9aee80L, 0x69652614fd1c50fL, "org.modelix.model.repositoryconcepts.structure.Module");
  }
}
